// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/ui/submissions/widgets/deadline_notification_banner_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:ngage/models/event.dart' as _i4;
import 'package:ngage/services/deadline_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DeadlineService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeadlineService extends _i1.Mock implements _i2.DeadlineService {
  MockDeadlineService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void startDeadlineMonitoring() => super.noSuchMethod(
        Invocation.method(
          #startDeadlineMonitoring,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopDeadlineMonitoring() => super.noSuchMethod(
        Invocation.method(
          #stopDeadlineMonitoring,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> scheduleEventDeadlineEnforcement(_i4.Event? event) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleEventDeadlineEnforcement,
          [event],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void cancelEventDeadlineEnforcement(String? eventId) => super.noSuchMethod(
        Invocation.method(
          #cancelEventDeadlineEnforcement,
          [eventId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Duration? getTimeUntilDeadline(_i4.Event? event) =>
      (super.noSuchMethod(Invocation.method(
        #getTimeUntilDeadline,
        [event],
      )) as Duration?);

  @override
  bool hasDeadlinePassed(_i4.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #hasDeadlinePassed,
          [event],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.DeadlineStatus getDeadlineStatus(_i4.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #getDeadlineStatus,
          [event],
        ),
        returnValue: _i2.DeadlineStatus.noDeadline,
      ) as _i2.DeadlineStatus);

  @override
  String formatTimeRemaining(Duration? timeRemaining) => (super.noSuchMethod(
        Invocation.method(
          #formatTimeRemaining,
          [timeRemaining],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #formatTimeRemaining,
            [timeRemaining],
          ),
        ),
      ) as String);

  @override
  String getCountdownText(_i4.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #getCountdownText,
          [event],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getCountdownText,
            [event],
          ),
        ),
      ) as String);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
