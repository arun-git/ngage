// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/utils/error_handler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:ngage/utils/error_recovery.dart' as _i5;
import 'package:ngage/utils/error_types.dart' as _i6;
import 'package:ngage/utils/logger.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i2.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i2.LogEntry> get logStream => (super.noSuchMethod(
        Invocation.getter(#logStream),
        returnValue: _i3.Stream<_i2.LogEntry>.empty(),
      ) as _i3.Stream<_i2.LogEntry>);

  @override
  List<_i2.LogEntry> get recentLogs => (super.noSuchMethod(
        Invocation.getter(#recentLogs),
        returnValue: <_i2.LogEntry>[],
      ) as List<_i2.LogEntry>);

  @override
  void configure({
    _i2.LogLevel? minimumLevel,
    String? userId,
    String? sessionId,
    bool? enableRemoteLogging,
    bool? enableLocalStorage,
    int? maxLocalLogs,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #configure,
          [],
          {
            #minimumLevel: minimumLevel,
            #userId: userId,
            #sessionId: sessionId,
            #enableRemoteLogging: enableRemoteLogging,
            #enableLocalStorage: enableLocalStorage,
            #maxLocalLogs: maxLocalLogs,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debug(
    String? message, {
    String? category,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
          {
            #category: category,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(
    String? message, {
    String? category,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
          {
            #category: category,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    String? message, {
    String? category,
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
          {
            #category: category,
            #error: error,
            #stackTrace: stackTrace,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, {
    String? category,
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
          {
            #category: category,
            #error: error,
            #stackTrace: stackTrace,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void critical(
    String? message, {
    String? category,
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? context,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #critical,
          [message],
          {
            #category: category,
            #error: error,
            #stackTrace: stackTrace,
            #context: context,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearLocalLogs() => super.noSuchMethod(
        Invocation.method(
          #clearLocalLogs,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.LogEntry> getLogsByLevel(_i2.LogLevel? level) => (super.noSuchMethod(
        Invocation.method(
          #getLogsByLevel,
          [level],
        ),
        returnValue: <_i2.LogEntry>[],
      ) as List<_i2.LogEntry>);

  @override
  List<_i2.LogEntry> getLogsByCategory(String? category) => (super.noSuchMethod(
        Invocation.method(
          #getLogsByCategory,
          [category],
        ),
        returnValue: <_i2.LogEntry>[],
      ) as List<_i2.LogEntry>);

  @override
  List<_i2.LogEntry> getLogsByTimeRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogsByTimeRange,
          [
            start,
            end,
          ],
        ),
        returnValue: <_i2.LogEntry>[],
      ) as List<_i2.LogEntry>);

  @override
  String exportLogsAsJson() => (super.noSuchMethod(
        Invocation.method(
          #exportLogsAsJson,
          [],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #exportLogsAsJson,
            [],
          ),
        ),
      ) as String);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ErrorRecovery].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorRecovery extends _i1.Mock implements _i5.ErrorRecovery {
  MockErrorRecovery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> attemptRecovery(
    Object? error,
    _i6.ErrorType? errorType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #attemptRecovery,
          [
            error,
            errorType,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void resetRetryAttempts(_i6.ErrorType? errorType) => super.noSuchMethod(
        Invocation.method(
          #resetRetryAttempts,
          [errorType],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resetAllRetryAttempts() => super.noSuchMethod(
        Invocation.method(
          #resetAllRetryAttempts,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getRetryAttempts(_i6.ErrorType? errorType) => (super.noSuchMethod(
        Invocation.method(
          #getRetryAttempts,
          [errorType],
        ),
        returnValue: 0,
      ) as int);

  @override
  bool canRecover(_i6.ErrorType? errorType) => (super.noSuchMethod(
        Invocation.method(
          #canRecover,
          [errorType],
        ),
        returnValue: false,
      ) as bool);
}
