// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/member_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ngage/models/member.dart' as _i2;
import 'package:ngage/models/user.dart' as _i6;
import 'package:ngage/repositories/member_repository.dart' as _i3;
import 'package:ngage/repositories/user_repository.dart' as _i5;
import 'package:ngage/services/member_claim_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMember_0 extends _i1.SmartFake implements _i2.Member {
  _FakeMember_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MemberRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemberRepository extends _i1.Mock implements _i3.MemberRepository {
  MockMemberRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Member> createMember(_i2.Member? member) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMember,
          [member],
        ),
        returnValue: _i4.Future<_i2.Member>.value(_FakeMember_0(
          this,
          Invocation.method(
            #createMember,
            [member],
          ),
        )),
      ) as _i4.Future<_i2.Member>);

  @override
  _i4.Future<_i2.Member?> getMember(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #getMember,
          [memberId],
        ),
        returnValue: _i4.Future<_i2.Member?>.value(),
      ) as _i4.Future<_i2.Member?>);

  @override
  _i4.Future<void> updateMember(_i2.Member? member) => (super.noSuchMethod(
        Invocation.method(
          #updateMember,
          [member],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Member>> findUnclaimedMembers(
    String? email,
    String? phone,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findUnclaimedMembers,
          [
            email,
            phone,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<List<_i2.Member>> getUserMembers(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserMembers,
          [userId],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<List<_i2.Member>> getAllMembers() => (super.noSuchMethod(
        Invocation.method(
          #getAllMembers,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<void> claimMember(
    String? memberId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #claimMember,
          [
            memberId,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> bulkCreateMembers(List<_i2.Member>? members) =>
      (super.noSuchMethod(
        Invocation.method(
          #bulkCreateMembers,
          [members],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMember(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMember,
          [memberId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i2.Member?> streamMember(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #streamMember,
          [memberId],
        ),
        returnValue: _i4.Stream<_i2.Member?>.empty(),
      ) as _i4.Stream<_i2.Member?>);

  @override
  _i4.Stream<List<_i2.Member>> streamUserMembers(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamUserMembers,
          [userId],
        ),
        returnValue: _i4.Stream<List<_i2.Member>>.empty(),
      ) as _i4.Stream<List<_i2.Member>>);

  @override
  _i4.Future<_i2.Member?> getById(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [memberId],
        ),
        returnValue: _i4.Future<_i2.Member?>.value(),
      ) as _i4.Future<_i2.Member?>);

  @override
  _i4.Future<List<_i2.Member>> getGroupMembers(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupMembers,
          [groupId],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<List<_i2.Member>> getTeamMembers(String? teamId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamMembers,
          [teamId],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<bool> hasGroupRole(
    String? memberId,
    String? groupId,
    String? role,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasGroupRole,
          [
            memberId,
            groupId,
            role,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.Member>> getGroupMembersByRole(
    String? groupId,
    String? role,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupMembersByRole,
          [
            groupId,
            role,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i5.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> createUser(_i6.User? user) => (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.User?> getUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [userId],
        ),
        returnValue: _i4.Future<_i6.User?>.value(),
      ) as _i4.Future<_i6.User?>);

  @override
  _i4.Future<void> updateUser(_i6.User? user) => (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [user],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateDefaultMember(
    String? userId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDefaultMember,
          [
            userId,
            memberId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [userId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> userExists(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #userExists,
          [userId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Stream<_i6.User?> streamUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #streamUser,
          [userId],
        ),
        returnValue: _i4.Stream<_i6.User?>.empty(),
      ) as _i4.Stream<_i6.User?>);
}

/// A class which mocks [MemberClaimService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemberClaimService extends _i1.Mock
    implements _i7.MemberClaimService {
  MockMemberClaimService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Member>> claimMemberProfiles(_i6.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #claimMemberProfiles,
          [user],
        ),
        returnValue: _i4.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i4.Future<List<_i2.Member>>);

  @override
  _i4.Future<_i2.Member> createBasicMemberProfile(_i6.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBasicMemberProfile,
          [user],
        ),
        returnValue: _i4.Future<_i2.Member>.value(_FakeMember_0(
          this,
          Invocation.method(
            #createBasicMemberProfile,
            [user],
          ),
        )),
      ) as _i4.Future<_i2.Member>);

  @override
  _i4.Future<void> setDefaultMember(
    String? userId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDefaultMember,
          [
            userId,
            memberId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
