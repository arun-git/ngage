// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/moderation_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:ngage/models/content_report.dart' as _i6;
import 'package:ngage/models/models.dart' as _i2;
import 'package:ngage/models/moderation_action.dart' as _i9;
import 'package:ngage/models/permission.dart' as _i3;
import 'package:ngage/repositories/content_report_repository.dart' as _i4;
import 'package:ngage/repositories/moderation_action_repository.dart' as _i8;
import 'package:ngage/services/notification_service.dart' as _i10;
import 'package:ngage/services/permission_service.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotificationPreferences_0 extends _i1.SmartFake
    implements _i2.NotificationPreferences {
  _FakeNotificationPreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePermission_1 extends _i1.SmartFake implements _i3.Permission {
  _FakePermission_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRole_2 extends _i1.SmartFake implements _i3.Role {
  _FakeRole_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMemberRoleAssignment_3 extends _i1.SmartFake
    implements _i3.MemberRoleAssignment {
  _FakeMemberRoleAssignment_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ContentReportRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockContentReportRepository extends _i1.Mock
    implements _i4.ContentReportRepository {
  MockContentReportRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> createReport(_i6.ContentReport? report) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReport,
          [report],
        ),
        returnValue: _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #createReport,
            [report],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i6.ContentReport?> getReport(String? reportId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReport,
          [reportId],
        ),
        returnValue: _i5.Future<_i6.ContentReport?>.value(),
      ) as _i5.Future<_i6.ContentReport?>);

  @override
  _i5.Future<List<_i6.ContentReport>> getReportsForContent(
    String? contentId,
    _i6.ContentType? contentType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReportsForContent,
          [
            contentId,
            contentType,
          ],
        ),
        returnValue:
            _i5.Future<List<_i6.ContentReport>>.value(<_i6.ContentReport>[]),
      ) as _i5.Future<List<_i6.ContentReport>>);

  @override
  _i5.Future<List<_i6.ContentReport>> getReportsByStatus(
    _i6.ReportStatus? status, {
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReportsByStatus,
          [status],
          {#limit: limit},
        ),
        returnValue:
            _i5.Future<List<_i6.ContentReport>>.value(<_i6.ContentReport>[]),
      ) as _i5.Future<List<_i6.ContentReport>>);

  @override
  _i5.Future<List<_i6.ContentReport>> getPendingReports({int? limit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingReports,
          [],
          {#limit: limit},
        ),
        returnValue:
            _i5.Future<List<_i6.ContentReport>>.value(<_i6.ContentReport>[]),
      ) as _i5.Future<List<_i6.ContentReport>>);

  @override
  _i5.Future<List<_i6.ContentReport>> getReportsByReporter(
    String? reporterId, {
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReportsByReporter,
          [reporterId],
          {#limit: limit},
        ),
        returnValue:
            _i5.Future<List<_i6.ContentReport>>.value(<_i6.ContentReport>[]),
      ) as _i5.Future<List<_i6.ContentReport>>);

  @override
  _i5.Future<void> updateReportStatus(
    String? reportId,
    _i6.ReportStatus? status, {
    String? reviewedBy,
    String? reviewNotes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateReportStatus,
          [
            reportId,
            status,
          ],
          {
            #reviewedBy: reviewedBy,
            #reviewNotes: reviewNotes,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteReport(String? reportId) => (super.noSuchMethod(
        Invocation.method(
          #deleteReport,
          [reportId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, int>> getReportsStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getReportsStatistics,
          [],
        ),
        returnValue: _i5.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i5.Future<Map<String, int>>);

  @override
  _i5.Stream<List<_i6.ContentReport>> streamPendingReports() =>
      (super.noSuchMethod(
        Invocation.method(
          #streamPendingReports,
          [],
        ),
        returnValue: _i5.Stream<List<_i6.ContentReport>>.empty(),
      ) as _i5.Stream<List<_i6.ContentReport>>);

  @override
  _i5.Future<bool> hasUserReportedContent(
    String? reporterId,
    String? contentId,
    _i6.ContentType? contentType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasUserReportedContent,
          [
            reporterId,
            contentId,
            contentType,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [ModerationActionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockModerationActionRepository extends _i1.Mock
    implements _i8.ModerationActionRepository {
  MockModerationActionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> createAction(_i9.ModerationAction? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #createAction,
          [action],
        ),
        returnValue: _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #createAction,
            [action],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i9.ModerationAction?> getAction(String? actionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAction,
          [actionId],
        ),
        returnValue: _i5.Future<_i9.ModerationAction?>.value(),
      ) as _i5.Future<_i9.ModerationAction?>);

  @override
  _i5.Future<List<_i9.ModerationAction>> getActionsForTarget(
    String? targetId,
    _i9.ModerationTargetType? targetType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActionsForTarget,
          [
            targetId,
            targetType,
          ],
        ),
        returnValue: _i5.Future<List<_i9.ModerationAction>>.value(
            <_i9.ModerationAction>[]),
      ) as _i5.Future<List<_i9.ModerationAction>>);

  @override
  _i5.Future<List<_i9.ModerationAction>> getActiveActionsForTarget(
    String? targetId,
    _i9.ModerationTargetType? targetType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveActionsForTarget,
          [
            targetId,
            targetType,
          ],
        ),
        returnValue: _i5.Future<List<_i9.ModerationAction>>.value(
            <_i9.ModerationAction>[]),
      ) as _i5.Future<List<_i9.ModerationAction>>);

  @override
  _i5.Future<List<_i9.ModerationAction>> getActionsByModerator(
    String? moderatorId, {
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActionsByModerator,
          [moderatorId],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i9.ModerationAction>>.value(
            <_i9.ModerationAction>[]),
      ) as _i5.Future<List<_i9.ModerationAction>>);

  @override
  _i5.Future<List<_i9.ModerationAction>> getActionsByType(
    _i9.ModerationActionType? actionType, {
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActionsByType,
          [actionType],
          {#limit: limit},
        ),
        returnValue: _i5.Future<List<_i9.ModerationAction>>.value(
            <_i9.ModerationAction>[]),
      ) as _i5.Future<List<_i9.ModerationAction>>);

  @override
  _i5.Future<void> updateActionStatus(
    String? actionId,
    bool? isActive,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateActionStatus,
          [
            actionId,
            isActive,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deactivateAction(String? actionId) => (super.noSuchMethod(
        Invocation.method(
          #deactivateAction,
          [actionId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteAction(String? actionId) => (super.noSuchMethod(
        Invocation.method(
          #deleteAction,
          [actionId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, int>> getModerationStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getModerationStatistics,
          [],
        ),
        returnValue: _i5.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i5.Future<Map<String, int>>);

  @override
  _i5.Future<bool> isContentHidden(
    String? contentId,
    _i9.ModerationTargetType? targetType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isContentHidden,
          [
            contentId,
            targetType,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isUserRestricted(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #isUserRestricted,
          [userId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i9.ModerationAction>> getUserRestrictions(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserRestrictions,
          [userId],
        ),
        returnValue: _i5.Future<List<_i9.ModerationAction>>.value(
            <_i9.ModerationAction>[]),
      ) as _i5.Future<List<_i9.ModerationAction>>);

  @override
  _i5.Future<void> cleanupExpiredActions() => (super.noSuchMethod(
        Invocation.method(
          #cleanupExpiredActions,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i10.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void registerChannelHandler(
    _i2.NotificationChannel? channel,
    _i10.NotificationChannelHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #registerChannelHandler,
          [
            channel,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> sendNotification(_i2.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNotification,
          [notification],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendEventReminder({
    required _i2.Event? event,
    required List<String>? memberIds,
    required Duration? timeUntilEvent,
    _i2.NotificationPriority? priority = _i2.NotificationPriority.normal,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEventReminder,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #timeUntilEvent: timeUntilEvent,
            #priority: priority,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendDeadlineAlert({
    required _i2.Event? event,
    required List<String>? memberIds,
    required Duration? timeUntilDeadline,
    bool? isEscalated = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineAlert,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #timeUntilDeadline: timeUntilDeadline,
            #isEscalated: isEscalated,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendResultAnnouncement({
    required _i2.Event? event,
    required List<String>? memberIds,
    required String? resultSummary,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendResultAnnouncement,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #resultSummary: resultSummary,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendLeaderboardUpdate({
    required _i2.Event? event,
    required List<String>? memberIds,
    required String? updateMessage,
    Map<String, dynamic>? leaderboardData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendLeaderboardUpdate,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #updateMessage: updateMessage,
            #leaderboardData: leaderboardData,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendDeadlineAutoCloseNotification(
    String? memberId,
    _i2.Event? event,
    _i2.Submission? submission,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineAutoCloseNotification,
          [
            memberId,
            event,
            submission,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendDeadlinePassedNotification(
    _i2.Event? event,
    int? autoClosedCount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlinePassedNotification,
          [
            event,
            autoClosedCount,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendDeadlineReminderNotification(
    String? memberId,
    _i2.Event? event,
    Duration? timeRemaining,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineReminderNotification,
          [
            memberId,
            event,
            timeRemaining,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendOrganizerDeadlineReminder(
    _i2.Event? event,
    Duration? timeRemaining,
    int? pendingSubmissions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOrganizerDeadlineReminder,
          [
            event,
            timeRemaining,
            pendingSubmissions,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> scheduleNotification(_i2.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotification,
          [notification],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> processScheduledNotifications() => (super.noSuchMethod(
        Invocation.method(
          #processScheduledNotifications,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Notification>> getMemberNotifications(
    String? memberId, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberNotifications,
          [memberId],
          {#limit: limit},
        ),
        returnValue:
            _i5.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
      ) as _i5.Future<List<_i2.Notification>>);

  @override
  _i5.Future<void> markAsRead(String? notificationId) => (super.noSuchMethod(
        Invocation.method(
          #markAsRead,
          [notificationId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> markAllAsRead(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #markAllAsRead,
          [memberId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int> getUnreadCount(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #getUnreadCount,
          [memberId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Stream<List<_i2.Notification>> streamNotifications(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamNotifications,
          [memberId],
        ),
        returnValue: _i5.Stream<List<_i2.Notification>>.empty(),
      ) as _i5.Stream<List<_i2.Notification>>);

  @override
  _i5.Future<void> saveNotificationPreferences(
          _i2.NotificationPreferences? preferences) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveNotificationPreferences,
          [preferences],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.NotificationPreferences> getNotificationPreferences(
          String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotificationPreferences,
          [memberId],
        ),
        returnValue: _i5.Future<_i2.NotificationPreferences>.value(
            _FakeNotificationPreferences_0(
          this,
          Invocation.method(
            #getNotificationPreferences,
            [memberId],
          ),
        )),
      ) as _i5.Future<_i2.NotificationPreferences>);
}

/// A class which mocks [PermissionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionService extends _i1.Mock implements _i11.PermissionService {
  MockPermissionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Permission> createPermission({
    required String? name,
    required String? description,
    required _i2.PermissionType? type,
    required String? resource,
    Map<String, dynamic>? conditions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPermission,
          [],
          {
            #name: name,
            #description: description,
            #type: type,
            #resource: resource,
            #conditions: conditions,
          },
        ),
        returnValue: _i5.Future<_i3.Permission>.value(_FakePermission_1(
          this,
          Invocation.method(
            #createPermission,
            [],
            {
              #name: name,
              #description: description,
              #type: type,
              #resource: resource,
              #conditions: conditions,
            },
          ),
        )),
      ) as _i5.Future<_i3.Permission>);

  @override
  _i5.Future<_i3.Permission?> getPermissionById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPermissionById,
          [id],
        ),
        returnValue: _i5.Future<_i3.Permission?>.value(),
      ) as _i5.Future<_i3.Permission?>);

  @override
  _i5.Future<List<_i3.Permission>> getActivePermissions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivePermissions,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Permission>>.value(<_i3.Permission>[]),
      ) as _i5.Future<List<_i3.Permission>>);

  @override
  _i5.Future<List<_i3.Permission>> getPermissionsByType(
          _i2.PermissionType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPermissionsByType,
          [type],
        ),
        returnValue: _i5.Future<List<_i3.Permission>>.value(<_i3.Permission>[]),
      ) as _i5.Future<List<_i3.Permission>>);

  @override
  _i5.Future<List<_i3.Permission>> getPermissionsByResource(String? resource) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPermissionsByResource,
          [resource],
        ),
        returnValue: _i5.Future<List<_i3.Permission>>.value(<_i3.Permission>[]),
      ) as _i5.Future<List<_i3.Permission>>);

  @override
  _i5.Future<_i3.Permission> updatePermission(_i3.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePermission,
          [permission],
        ),
        returnValue: _i5.Future<_i3.Permission>.value(_FakePermission_1(
          this,
          Invocation.method(
            #updatePermission,
            [permission],
          ),
        )),
      ) as _i5.Future<_i3.Permission>);

  @override
  _i5.Future<_i3.Permission> deactivatePermission(String? permissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deactivatePermission,
          [permissionId],
        ),
        returnValue: _i5.Future<_i3.Permission>.value(_FakePermission_1(
          this,
          Invocation.method(
            #deactivatePermission,
            [permissionId],
          ),
        )),
      ) as _i5.Future<_i3.Permission>);

  @override
  _i5.Future<void> deletePermission(String? permissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePermission,
          [permissionId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.Role> createRole({
    required String? name,
    required String? description,
    required List<String>? permissionIds,
    _i2.DataVisibilityLevel? defaultVisibility =
        _i2.DataVisibilityLevel.private,
    bool? isSystemRole = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRole,
          [],
          {
            #name: name,
            #description: description,
            #permissionIds: permissionIds,
            #defaultVisibility: defaultVisibility,
            #isSystemRole: isSystemRole,
          },
        ),
        returnValue: _i5.Future<_i3.Role>.value(_FakeRole_2(
          this,
          Invocation.method(
            #createRole,
            [],
            {
              #name: name,
              #description: description,
              #permissionIds: permissionIds,
              #defaultVisibility: defaultVisibility,
              #isSystemRole: isSystemRole,
            },
          ),
        )),
      ) as _i5.Future<_i3.Role>);

  @override
  _i5.Future<_i3.Role?> getRoleById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getRoleById,
          [id],
        ),
        returnValue: _i5.Future<_i3.Role?>.value(),
      ) as _i5.Future<_i3.Role?>);

  @override
  _i5.Future<List<_i3.Role>> getActiveRoles() => (super.noSuchMethod(
        Invocation.method(
          #getActiveRoles,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Role>>.value(<_i3.Role>[]),
      ) as _i5.Future<List<_i3.Role>>);

  @override
  _i5.Future<List<_i3.Role>> getSystemRoles() => (super.noSuchMethod(
        Invocation.method(
          #getSystemRoles,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Role>>.value(<_i3.Role>[]),
      ) as _i5.Future<List<_i3.Role>>);

  @override
  _i5.Future<_i3.Role> updateRole(_i3.Role? role) => (super.noSuchMethod(
        Invocation.method(
          #updateRole,
          [role],
        ),
        returnValue: _i5.Future<_i3.Role>.value(_FakeRole_2(
          this,
          Invocation.method(
            #updateRole,
            [role],
          ),
        )),
      ) as _i5.Future<_i3.Role>);

  @override
  _i5.Future<_i3.Role> addPermissionToRole(
    String? roleId,
    String? permissionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPermissionToRole,
          [
            roleId,
            permissionId,
          ],
        ),
        returnValue: _i5.Future<_i3.Role>.value(_FakeRole_2(
          this,
          Invocation.method(
            #addPermissionToRole,
            [
              roleId,
              permissionId,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Role>);

  @override
  _i5.Future<_i3.Role> removePermissionFromRole(
    String? roleId,
    String? permissionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removePermissionFromRole,
          [
            roleId,
            permissionId,
          ],
        ),
        returnValue: _i5.Future<_i3.Role>.value(_FakeRole_2(
          this,
          Invocation.method(
            #removePermissionFromRole,
            [
              roleId,
              permissionId,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Role>);

  @override
  _i5.Future<_i3.Role> deactivateRole(String? roleId) => (super.noSuchMethod(
        Invocation.method(
          #deactivateRole,
          [roleId],
        ),
        returnValue: _i5.Future<_i3.Role>.value(_FakeRole_2(
          this,
          Invocation.method(
            #deactivateRole,
            [roleId],
          ),
        )),
      ) as _i5.Future<_i3.Role>);

  @override
  _i5.Future<void> deleteRole(String? roleId) => (super.noSuchMethod(
        Invocation.method(
          #deleteRole,
          [roleId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.MemberRoleAssignment> assignRoleToMember({
    required String? memberId,
    required String? roleId,
    required String? contextType,
    String? contextId,
    Map<String, dynamic>? additionalPermissions,
    DateTime? expiresAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #assignRoleToMember,
          [],
          {
            #memberId: memberId,
            #roleId: roleId,
            #contextType: contextType,
            #contextId: contextId,
            #additionalPermissions: additionalPermissions,
            #expiresAt: expiresAt,
          },
        ),
        returnValue: _i5.Future<_i3.MemberRoleAssignment>.value(
            _FakeMemberRoleAssignment_3(
          this,
          Invocation.method(
            #assignRoleToMember,
            [],
            {
              #memberId: memberId,
              #roleId: roleId,
              #contextType: contextType,
              #contextId: contextId,
              #additionalPermissions: additionalPermissions,
              #expiresAt: expiresAt,
            },
          ),
        )),
      ) as _i5.Future<_i3.MemberRoleAssignment>);

  @override
  _i5.Future<List<_i3.MemberRoleAssignment>> getMemberRoleAssignments(
          String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberRoleAssignments,
          [memberId],
        ),
        returnValue: _i5.Future<List<_i3.MemberRoleAssignment>>.value(
            <_i3.MemberRoleAssignment>[]),
      ) as _i5.Future<List<_i3.MemberRoleAssignment>>);

  @override
  _i5.Future<List<_i3.MemberRoleAssignment>> getContextRoleAssignments(
    String? contextType,
    String? contextId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContextRoleAssignments,
          [
            contextType,
            contextId,
          ],
        ),
        returnValue: _i5.Future<List<_i3.MemberRoleAssignment>>.value(
            <_i3.MemberRoleAssignment>[]),
      ) as _i5.Future<List<_i3.MemberRoleAssignment>>);

  @override
  _i5.Future<_i3.MemberRoleAssignment?> getMemberContextRoleAssignment(
    String? memberId,
    String? contextType,
    String? contextId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberContextRoleAssignment,
          [
            memberId,
            contextType,
            contextId,
          ],
        ),
        returnValue: _i5.Future<_i3.MemberRoleAssignment?>.value(),
      ) as _i5.Future<_i3.MemberRoleAssignment?>);

  @override
  _i5.Future<_i3.MemberRoleAssignment> updateRoleAssignment(
          _i3.MemberRoleAssignment? assignment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRoleAssignment,
          [assignment],
        ),
        returnValue: _i5.Future<_i3.MemberRoleAssignment>.value(
            _FakeMemberRoleAssignment_3(
          this,
          Invocation.method(
            #updateRoleAssignment,
            [assignment],
          ),
        )),
      ) as _i5.Future<_i3.MemberRoleAssignment>);

  @override
  _i5.Future<_i3.MemberRoleAssignment> deactivateRoleAssignment(
          String? assignmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deactivateRoleAssignment,
          [assignmentId],
        ),
        returnValue: _i5.Future<_i3.MemberRoleAssignment>.value(
            _FakeMemberRoleAssignment_3(
          this,
          Invocation.method(
            #deactivateRoleAssignment,
            [assignmentId],
          ),
        )),
      ) as _i5.Future<_i3.MemberRoleAssignment>);

  @override
  _i5.Future<void> deleteRoleAssignment(String? assignmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRoleAssignment,
          [assignmentId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> memberHasPermission(
    String? memberId,
    String? permissionName,
    String? contextType,
    String? contextId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #memberHasPermission,
          [
            memberId,
            permissionName,
            contextType,
            contextId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i3.Permission>> getMemberPermissions(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberPermissions,
          [memberId],
        ),
        returnValue: _i5.Future<List<_i3.Permission>>.value(<_i3.Permission>[]),
      ) as _i5.Future<List<_i3.Permission>>);

  @override
  _i5.Future<bool> canAccessResource(
    String? memberId,
    String? resource,
    _i2.PermissionType? permissionType,
    String? contextType,
    String? contextId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #canAccessResource,
          [
            memberId,
            resource,
            permissionType,
            contextType,
            contextId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> canViewData(
    String? memberId,
    _i2.DataVisibilityLevel? dataVisibility,
    String? contextType,
    String? contextId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #canViewData,
          [
            memberId,
            dataVisibility,
            contextType,
            contextId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> initializeSystemRoles() => (super.noSuchMethod(
        Invocation.method(
          #initializeSystemRoles,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> getRoleAssignmentStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoleAssignmentStatistics,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}
