// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/submission_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:cloud_firestore/cloud_firestore.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:ngage/models/submission.dart' as _i2;
import 'package:ngage/repositories/submission_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSubmission_0 extends _i1.SmartFake implements _i2.Submission {
  _FakeSubmission_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SubmissionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubmissionRepository extends _i1.Mock
    implements _i3.SubmissionRepository {
  MockSubmissionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Submission> create(_i2.Submission? submission) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [submission],
        ),
        returnValue: _i4.Future<_i2.Submission>.value(_FakeSubmission_0(
          this,
          Invocation.method(
            #create,
            [submission],
          ),
        )),
      ) as _i4.Future<_i2.Submission>);

  @override
  _i4.Future<_i2.Submission?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Submission?>.value(),
      ) as _i4.Future<_i2.Submission?>);

  @override
  _i4.Future<_i2.Submission> update(_i2.Submission? submission) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [submission],
        ),
        returnValue: _i4.Future<_i2.Submission>.value(_FakeSubmission_0(
          this,
          Invocation.method(
            #update,
            [submission],
          ),
        )),
      ) as _i4.Future<_i2.Submission>);

  @override
  _i4.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Submission>> getByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEventId,
          [eventId],
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);

  @override
  _i4.Future<List<_i2.Submission>> getByTeamId(String? teamId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByTeamId,
          [teamId],
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);

  @override
  _i4.Future<List<_i2.Submission>> getByMemberId(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByMemberId,
          [memberId],
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);

  @override
  _i4.Future<String> uploadFile(
    String? submissionId,
    _i5.File? file,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            submissionId,
            file,
            fileName,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #uploadFile,
            [
              submissionId,
              file,
              fileName,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<String>> uploadFiles(
    String? submissionId,
    List<_i5.File>? files,
    List<String>? fileNames,
    void Function(double)? onProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFiles,
          [
            submissionId,
            files,
            fileNames,
            onProgress,
          ],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> deleteFile(
    String? submissionId,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [
            submissionId,
            fileName,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i2.Submission>> streamByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamByEventId,
          [eventId],
        ),
        returnValue: _i4.Stream<List<_i2.Submission>>.empty(),
      ) as _i4.Stream<List<_i2.Submission>>);

  @override
  _i4.Stream<_i2.Submission?> streamById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #streamById,
          [id],
        ),
        returnValue: _i4.Stream<_i2.Submission?>.empty(),
      ) as _i4.Stream<_i2.Submission?>);

  @override
  _i4.Future<List<_i2.Submission>> getSubmissionsPaginated({
    String? eventId,
    String? teamId,
    _i7.DocumentSnapshot<Object?>? startAfter,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubmissionsPaginated,
          [],
          {
            #eventId: eventId,
            #teamId: teamId,
            #startAfter: startAfter,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);

  @override
  _i4.Future<bool> hasTeamSubmitted(
    String? eventId,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasTeamSubmitted,
          [
            eventId,
            teamId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getSubmissionCount(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getSubmissionCount,
          [eventId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.Submission>> getDraftSubmissionsByEvent(
          String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDraftSubmissionsByEvent,
          [eventId],
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);
}
