// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/notification_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ngage/models/models.dart' as _i2;
import 'package:ngage/repositories/notification_repository.dart' as _i3;
import 'package:ngage/services/notification_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNotificationPreferences_0 extends _i1.SmartFake
    implements _i2.NotificationPreferences {
  _FakeNotificationPreferences_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NotificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationRepository extends _i1.Mock
    implements _i3.NotificationRepository {
  MockNotificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> createNotification(_i2.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNotification,
          [notification],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Notification>> getMemberNotifications(
    String? memberId, {
    int? limit = 50,
    DateTime? lastCreatedAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberNotifications,
          [memberId],
          {
            #limit: limit,
            #lastCreatedAt: lastCreatedAt,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
      ) as _i4.Future<List<_i2.Notification>>);

  @override
  _i4.Future<int> getUnreadNotificationsCount(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUnreadNotificationsCount,
          [memberId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> markNotificationAsRead(String? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markNotificationAsRead,
          [notificationId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markAllNotificationsAsRead(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAllNotificationsAsRead,
          [memberId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteNotification(String? notificationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNotification,
          [notificationId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Notification>> getScheduledNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getScheduledNotifications,
          [],
        ),
        returnValue:
            _i4.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
      ) as _i4.Future<List<_i2.Notification>>);

  @override
  _i4.Stream<List<_i2.Notification>> streamMemberNotifications(
          String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamMemberNotifications,
          [memberId],
        ),
        returnValue: _i4.Stream<List<_i2.Notification>>.empty(),
      ) as _i4.Stream<List<_i2.Notification>>);

  @override
  _i4.Future<_i2.NotificationPreferences?> getNotificationPreferences(
          String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotificationPreferences,
          [memberId],
        ),
        returnValue: _i4.Future<_i2.NotificationPreferences?>.value(),
      ) as _i4.Future<_i2.NotificationPreferences?>);

  @override
  _i4.Future<void> saveNotificationPreferences(
          _i2.NotificationPreferences? preferences) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveNotificationPreferences,
          [preferences],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i2.NotificationPreferences getDefaultPreferences(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDefaultPreferences,
          [memberId],
        ),
        returnValue: _FakeNotificationPreferences_0(
          this,
          Invocation.method(
            #getDefaultPreferences,
            [memberId],
          ),
        ),
      ) as _i2.NotificationPreferences);

  @override
  _i4.Future<void> createNotificationsBatch(
          List<_i2.Notification>? notifications) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNotificationsBatch,
          [notifications],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteOldNotifications(
          {Duration? olderThan = const Duration(days: 30)}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOldNotifications,
          [],
          {#olderThan: olderThan},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Notification>> getNotificationsByType(
    _i2.NotificationType? type, {
    DateTime? startDate,
    DateTime? endDate,
    int? limit = 100,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotificationsByType,
          [type],
          {
            #startDate: startDate,
            #endDate: endDate,
            #limit: limit,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
      ) as _i4.Future<List<_i2.Notification>>);
}

/// A class which mocks [NotificationChannelHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationChannelHandler extends _i1.Mock
    implements _i5.NotificationChannelHandler {
  MockNotificationChannelHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> sendNotification(_i2.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNotification,
          [notification],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
