// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/deadline_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i6;

import 'package:cloud_firestore/cloud_firestore.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:ngage/models/models.dart' as _i2;
import 'package:ngage/repositories/event_repository.dart' as _i3;
import 'package:ngage/repositories/submission_repository.dart' as _i5;
import 'package:ngage/services/notification_service.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEvent_0 extends _i1.SmartFake implements _i2.Event {
  _FakeEvent_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSubmission_1 extends _i1.SmartFake implements _i2.Submission {
  _FakeSubmission_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationPreferences_2 extends _i1.SmartFake
    implements _i2.NotificationPreferences {
  _FakeNotificationPreferences_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EventRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventRepository extends _i1.Mock implements _i3.EventRepository {
  MockEventRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> createEvent(_i2.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #createEvent,
          [event],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Event?> getEventById(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getEventById,
          [eventId],
        ),
        returnValue: _i4.Future<_i2.Event?>.value(),
      ) as _i4.Future<_i2.Event?>);

  @override
  _i4.Future<void> updateEvent(_i2.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #updateEvent,
          [event],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteEvent(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #deleteEvent,
          [eventId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Event>> getGroupEvents(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupEvents,
          [groupId],
        ),
        returnValue: _i4.Future<List<_i2.Event>>.value(<_i2.Event>[]),
      ) as _i4.Future<List<_i2.Event>>);

  @override
  _i4.Future<List<_i2.Event>> getEventsByStatus(
    String? groupId,
    _i2.EventStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventsByStatus,
          [
            groupId,
            status,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Event>>.value(<_i2.Event>[]),
      ) as _i4.Future<List<_i2.Event>>);

  @override
  _i4.Future<List<_i2.Event>> getActiveEvents(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveEvents,
          [groupId],
        ),
        returnValue: _i4.Future<List<_i2.Event>>.value(<_i2.Event>[]),
      ) as _i4.Future<List<_i2.Event>>);

  @override
  _i4.Future<List<_i2.Event>> getAllActiveEvents() => (super.noSuchMethod(
        Invocation.method(
          #getAllActiveEvents,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Event>>.value(<_i2.Event>[]),
      ) as _i4.Future<List<_i2.Event>>);

  @override
  _i4.Future<List<_i2.Event>> getScheduledEvents(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScheduledEvents,
          [groupId],
        ),
        returnValue: _i4.Future<List<_i2.Event>>.value(<_i2.Event>[]),
      ) as _i4.Future<List<_i2.Event>>);

  @override
  _i4.Future<List<_i2.Event>> getTeamEligibleEvents(
    String? groupId,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamEligibleEvents,
          [
            groupId,
            teamId,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Event>>.value(<_i2.Event>[]),
      ) as _i4.Future<List<_i2.Event>>);

  @override
  _i4.Future<List<_i2.Event>> getEventsWithUpcomingDeadlines(
    String? groupId, {
    int? daysAhead = 7,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventsWithUpcomingDeadlines,
          [groupId],
          {#daysAhead: daysAhead},
        ),
        returnValue: _i4.Future<List<_i2.Event>>.value(<_i2.Event>[]),
      ) as _i4.Future<List<_i2.Event>>);

  @override
  _i4.Stream<List<_i2.Event>> streamGroupEvents(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroupEvents,
          [groupId],
        ),
        returnValue: _i4.Stream<List<_i2.Event>>.empty(),
      ) as _i4.Stream<List<_i2.Event>>);

  @override
  _i4.Stream<_i2.Event?> streamEvent(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #streamEvent,
          [eventId],
        ),
        returnValue: _i4.Stream<_i2.Event?>.empty(),
      ) as _i4.Stream<_i2.Event?>);

  @override
  _i4.Future<void> updateEventStatus(
    String? eventId,
    _i2.EventStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEventStatus,
          [
            eventId,
            status,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateEventSchedule(
    String? eventId, {
    DateTime? startTime,
    DateTime? endTime,
    DateTime? submissionDeadline,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEventSchedule,
          [eventId],
          {
            #startTime: startTime,
            #endTime: endTime,
            #submissionDeadline: submissionDeadline,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> eventExists(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #eventExists,
          [eventId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getGroupEventsCount(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #getGroupEventsCount,
          [groupId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.Event>> searchEventsByTitle(
    String? groupId,
    String? searchTerm,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchEventsByTitle,
          [
            groupId,
            searchTerm,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Event>>.value(<_i2.Event>[]),
      ) as _i4.Future<List<_i2.Event>>);

  @override
  _i4.Future<void> updateEventAccess(
    String? eventId, {
    List<String>? eligibleTeamIds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEventAccess,
          [eventId],
          {#eligibleTeamIds: eligibleTeamIds},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<String>> getAllGroupTeamIds(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGroupTeamIds,
          [groupId],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<List<String>> validateTeamsInGroup(
    String? groupId,
    List<String>? teamIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateTeamsInGroup,
          [
            groupId,
            teamIds,
          ],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<bool> hasTeamCompletedEvent(
    String? eventId,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasTeamCompletedEvent,
          [
            eventId,
            teamId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.Event> update(_i2.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [event],
        ),
        returnValue: _i4.Future<_i2.Event>.value(_FakeEvent_0(
          this,
          Invocation.method(
            #update,
            [event],
          ),
        )),
      ) as _i4.Future<_i2.Event>);
}

/// A class which mocks [SubmissionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubmissionRepository extends _i1.Mock
    implements _i5.SubmissionRepository {
  MockSubmissionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Submission> create(_i2.Submission? submission) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [submission],
        ),
        returnValue: _i4.Future<_i2.Submission>.value(_FakeSubmission_1(
          this,
          Invocation.method(
            #create,
            [submission],
          ),
        )),
      ) as _i4.Future<_i2.Submission>);

  @override
  _i4.Future<_i2.Submission?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Submission?>.value(),
      ) as _i4.Future<_i2.Submission?>);

  @override
  _i4.Future<_i2.Submission> update(_i2.Submission? submission) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [submission],
        ),
        returnValue: _i4.Future<_i2.Submission>.value(_FakeSubmission_1(
          this,
          Invocation.method(
            #update,
            [submission],
          ),
        )),
      ) as _i4.Future<_i2.Submission>);

  @override
  _i4.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Submission>> getByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEventId,
          [eventId],
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);

  @override
  _i4.Future<List<_i2.Submission>> getByTeamId(String? teamId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByTeamId,
          [teamId],
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);

  @override
  _i4.Future<List<_i2.Submission>> getByMemberId(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByMemberId,
          [memberId],
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);

  @override
  _i4.Future<String> uploadFile(
    String? submissionId,
    _i6.File? file,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            submissionId,
            file,
            fileName,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #uploadFile,
            [
              submissionId,
              file,
              fileName,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<String>> uploadFiles(
    String? submissionId,
    List<_i6.File>? files,
    List<String>? fileNames,
    void Function(double)? onProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFiles,
          [
            submissionId,
            files,
            fileNames,
            onProgress,
          ],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> deleteFile(
    String? submissionId,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [
            submissionId,
            fileName,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i2.Submission>> streamByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamByEventId,
          [eventId],
        ),
        returnValue: _i4.Stream<List<_i2.Submission>>.empty(),
      ) as _i4.Stream<List<_i2.Submission>>);

  @override
  _i4.Stream<_i2.Submission?> streamById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #streamById,
          [id],
        ),
        returnValue: _i4.Stream<_i2.Submission?>.empty(),
      ) as _i4.Stream<_i2.Submission?>);

  @override
  _i4.Future<List<_i2.Submission>> getSubmissionsPaginated({
    String? eventId,
    String? teamId,
    _i8.DocumentSnapshot<Object?>? startAfter,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubmissionsPaginated,
          [],
          {
            #eventId: eventId,
            #teamId: teamId,
            #startAfter: startAfter,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);

  @override
  _i4.Future<bool> hasTeamSubmitted(
    String? eventId,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasTeamSubmitted,
          [
            eventId,
            teamId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getSubmissionCount(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getSubmissionCount,
          [eventId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.Submission>> getDraftSubmissionsByEvent(
          String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDraftSubmissionsByEvent,
          [eventId],
        ),
        returnValue: _i4.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i4.Future<List<_i2.Submission>>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i9.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void registerChannelHandler(
    _i2.NotificationChannel? channel,
    _i9.NotificationChannelHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #registerChannelHandler,
          [
            channel,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> sendNotification(_i2.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNotification,
          [notification],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendEventReminder({
    required _i2.Event? event,
    required List<String>? memberIds,
    required Duration? timeUntilEvent,
    _i2.NotificationPriority? priority = _i2.NotificationPriority.normal,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEventReminder,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #timeUntilEvent: timeUntilEvent,
            #priority: priority,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendDeadlineAlert({
    required _i2.Event? event,
    required List<String>? memberIds,
    required Duration? timeUntilDeadline,
    bool? isEscalated = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineAlert,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #timeUntilDeadline: timeUntilDeadline,
            #isEscalated: isEscalated,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendResultAnnouncement({
    required _i2.Event? event,
    required List<String>? memberIds,
    required String? resultSummary,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendResultAnnouncement,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #resultSummary: resultSummary,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendLeaderboardUpdate({
    required _i2.Event? event,
    required List<String>? memberIds,
    required String? updateMessage,
    Map<String, dynamic>? leaderboardData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendLeaderboardUpdate,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #updateMessage: updateMessage,
            #leaderboardData: leaderboardData,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendDeadlineAutoCloseNotification(
    String? memberId,
    _i2.Event? event,
    _i2.Submission? submission,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineAutoCloseNotification,
          [
            memberId,
            event,
            submission,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendDeadlinePassedNotification(
    _i2.Event? event,
    int? autoClosedCount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlinePassedNotification,
          [
            event,
            autoClosedCount,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendDeadlineReminderNotification(
    String? memberId,
    _i2.Event? event,
    Duration? timeRemaining,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineReminderNotification,
          [
            memberId,
            event,
            timeRemaining,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> sendOrganizerDeadlineReminder(
    _i2.Event? event,
    Duration? timeRemaining,
    int? pendingSubmissions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOrganizerDeadlineReminder,
          [
            event,
            timeRemaining,
            pendingSubmissions,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> scheduleNotification(_i2.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotification,
          [notification],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> processScheduledNotifications() => (super.noSuchMethod(
        Invocation.method(
          #processScheduledNotifications,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Notification>> getMemberNotifications(
    String? memberId, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberNotifications,
          [memberId],
          {#limit: limit},
        ),
        returnValue:
            _i4.Future<List<_i2.Notification>>.value(<_i2.Notification>[]),
      ) as _i4.Future<List<_i2.Notification>>);

  @override
  _i4.Future<void> markAsRead(String? notificationId) => (super.noSuchMethod(
        Invocation.method(
          #markAsRead,
          [notificationId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> markAllAsRead(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #markAllAsRead,
          [memberId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> getUnreadCount(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #getUnreadCount,
          [memberId],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Stream<List<_i2.Notification>> streamNotifications(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamNotifications,
          [memberId],
        ),
        returnValue: _i4.Stream<List<_i2.Notification>>.empty(),
      ) as _i4.Stream<List<_i2.Notification>>);

  @override
  _i4.Future<void> saveNotificationPreferences(
          _i2.NotificationPreferences? preferences) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveNotificationPreferences,
          [preferences],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.NotificationPreferences> getNotificationPreferences(
          String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotificationPreferences,
          [memberId],
        ),
        returnValue: _i4.Future<_i2.NotificationPreferences>.value(
            _FakeNotificationPreferences_2(
          this,
          Invocation.method(
            #getNotificationPreferences,
            [memberId],
          ),
        )),
      ) as _i4.Future<_i2.NotificationPreferences>);
}
