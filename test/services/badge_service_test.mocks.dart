// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/badge_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i11;

import 'package:cloud_firestore/cloud_firestore.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:ngage/models/badge.dart' as _i6;
import 'package:ngage/models/enums.dart' as _i7;
import 'package:ngage/models/member.dart' as _i2;
import 'package:ngage/models/models.dart' as _i3;
import 'package:ngage/repositories/badge_repository.dart' as _i4;
import 'package:ngage/repositories/event_repository.dart' as _i9;
import 'package:ngage/repositories/member_repository.dart' as _i8;
import 'package:ngage/repositories/post_repository.dart' as _i14;
import 'package:ngage/repositories/submission_repository.dart' as _i10;
import 'package:ngage/services/notification_service.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMember_0 extends _i1.SmartFake implements _i2.Member {
  _FakeMember_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEvent_1 extends _i1.SmartFake implements _i3.Event {
  _FakeEvent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSubmission_2 extends _i1.SmartFake implements _i3.Submission {
  _FakeSubmission_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePost_3 extends _i1.SmartFake implements _i3.Post {
  _FakePost_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostComment_4 extends _i1.SmartFake implements _i3.PostComment {
  _FakePostComment_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationPreferences_5 extends _i1.SmartFake
    implements _i3.NotificationPreferences {
  _FakeNotificationPreferences_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BadgeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBadgeRepository extends _i1.Mock implements _i4.BadgeRepository {
  MockBadgeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i6.Badge?> getBadge(String? badgeId) => (super.noSuchMethod(
        Invocation.method(
          #getBadge,
          [badgeId],
        ),
        returnValue: _i5.Future<_i6.Badge?>.value(),
      ) as _i5.Future<_i6.Badge?>);

  @override
  _i5.Future<_i6.Badge?> getBadgeById(String? badgeId) => (super.noSuchMethod(
        Invocation.method(
          #getBadgeById,
          [badgeId],
        ),
        returnValue: _i5.Future<_i6.Badge?>.value(),
      ) as _i5.Future<_i6.Badge?>);

  @override
  _i5.Future<void> storeMemberBadge(_i6.MemberBadge? memberBadge) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeMemberBadge,
          [memberBadge],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> storeMemberStreak(_i6.MemberStreak? streak) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeMemberStreak,
          [streak],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i6.MemberStreak?> getMemberStreak(
    String? memberId,
    _i7.StreakType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberStreak,
          [
            memberId,
            type,
          ],
        ),
        returnValue: _i5.Future<_i6.MemberStreak?>.value(),
      ) as _i5.Future<_i6.MemberStreak?>);

  @override
  _i5.Future<List<_i6.MemberStreak>> getMemberStreaks(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberStreaks,
          [memberId],
        ),
        returnValue:
            _i5.Future<List<_i6.MemberStreak>>.value(<_i6.MemberStreak>[]),
      ) as _i5.Future<List<_i6.MemberStreak>>);

  @override
  _i5.Future<_i6.MemberPoints?> getMemberPoints(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberPoints,
          [memberId],
        ),
        returnValue: _i5.Future<_i6.MemberPoints?>.value(),
      ) as _i5.Future<_i6.MemberPoints?>);

  @override
  _i5.Future<void> storeMemberPoints(_i6.MemberPoints? points) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeMemberPoints,
          [points],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.MemberMilestone>> getMemberMilestones(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberMilestones,
          [memberId],
        ),
        returnValue: _i5.Future<List<_i6.MemberMilestone>>.value(
            <_i6.MemberMilestone>[]),
      ) as _i5.Future<List<_i6.MemberMilestone>>);

  @override
  _i5.Future<void> storeMemberMilestone(_i6.MemberMilestone? milestone) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeMemberMilestone,
          [milestone],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.Badge>> getActiveBadges() => (super.noSuchMethod(
        Invocation.method(
          #getActiveBadges,
          [],
        ),
        returnValue: _i5.Future<List<_i6.Badge>>.value(<_i6.Badge>[]),
      ) as _i5.Future<List<_i6.Badge>>);

  @override
  _i5.Future<List<_i6.Badge>> getStreakMilestoneBadges(
          _i7.StreakType? streakType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getStreakMilestoneBadges,
          [streakType],
        ),
        returnValue: _i5.Future<List<_i6.Badge>>.value(<_i6.Badge>[]),
      ) as _i5.Future<List<_i6.Badge>>);

  @override
  _i5.Future<_i6.MemberBadge?> getMemberBadge(
    String? memberId,
    String? badgeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberBadge,
          [
            memberId,
            badgeId,
          ],
        ),
        returnValue: _i5.Future<_i6.MemberBadge?>.value(),
      ) as _i5.Future<_i6.MemberBadge?>);

  @override
  _i5.Future<List<_i6.MemberBadge>> getMemberBadges(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberBadges,
          [memberId],
        ),
        returnValue:
            _i5.Future<List<_i6.MemberBadge>>.value(<_i6.MemberBadge>[]),
      ) as _i5.Future<List<_i6.MemberBadge>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getPointsLeaderboard({
    String? groupId,
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPointsLeaderboard,
          [],
          {
            #groupId: groupId,
            #limit: limit,
          },
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [MemberRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMemberRepository extends _i1.Mock implements _i8.MemberRepository {
  MockMemberRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Member> createMember(_i2.Member? member) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMember,
          [member],
        ),
        returnValue: _i5.Future<_i2.Member>.value(_FakeMember_0(
          this,
          Invocation.method(
            #createMember,
            [member],
          ),
        )),
      ) as _i5.Future<_i2.Member>);

  @override
  _i5.Future<_i2.Member?> getMember(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #getMember,
          [memberId],
        ),
        returnValue: _i5.Future<_i2.Member?>.value(),
      ) as _i5.Future<_i2.Member?>);

  @override
  _i5.Future<void> updateMember(_i2.Member? member) => (super.noSuchMethod(
        Invocation.method(
          #updateMember,
          [member],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Member>> findUnclaimedMembers(
    String? email,
    String? phone,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findUnclaimedMembers,
          [
            email,
            phone,
          ],
        ),
        returnValue: _i5.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i5.Future<List<_i2.Member>>);

  @override
  _i5.Future<List<_i2.Member>> getUserMembers(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserMembers,
          [userId],
        ),
        returnValue: _i5.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i5.Future<List<_i2.Member>>);

  @override
  _i5.Future<List<_i2.Member>> getAllMembers() => (super.noSuchMethod(
        Invocation.method(
          #getAllMembers,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i5.Future<List<_i2.Member>>);

  @override
  _i5.Future<void> claimMember(
    String? memberId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #claimMember,
          [
            memberId,
            userId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> bulkCreateMembers(List<_i2.Member>? members) =>
      (super.noSuchMethod(
        Invocation.method(
          #bulkCreateMembers,
          [members],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteMember(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #deleteMember,
          [memberId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<_i2.Member?> streamMember(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #streamMember,
          [memberId],
        ),
        returnValue: _i5.Stream<_i2.Member?>.empty(),
      ) as _i5.Stream<_i2.Member?>);

  @override
  _i5.Stream<List<_i2.Member>> streamUserMembers(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamUserMembers,
          [userId],
        ),
        returnValue: _i5.Stream<List<_i2.Member>>.empty(),
      ) as _i5.Stream<List<_i2.Member>>);

  @override
  _i5.Future<_i2.Member?> getById(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [memberId],
        ),
        returnValue: _i5.Future<_i2.Member?>.value(),
      ) as _i5.Future<_i2.Member?>);

  @override
  _i5.Future<List<_i2.Member>> getGroupMembers(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupMembers,
          [groupId],
        ),
        returnValue: _i5.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i5.Future<List<_i2.Member>>);

  @override
  _i5.Future<List<_i2.Member>> getTeamMembers(String? teamId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamMembers,
          [teamId],
        ),
        returnValue: _i5.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i5.Future<List<_i2.Member>>);

  @override
  _i5.Future<bool> hasGroupRole(
    String? memberId,
    String? groupId,
    String? role,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasGroupRole,
          [
            memberId,
            groupId,
            role,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i2.Member>> getGroupMembersByRole(
    String? groupId,
    String? role,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupMembersByRole,
          [
            groupId,
            role,
          ],
        ),
        returnValue: _i5.Future<List<_i2.Member>>.value(<_i2.Member>[]),
      ) as _i5.Future<List<_i2.Member>>);
}

/// A class which mocks [EventRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventRepository extends _i1.Mock implements _i9.EventRepository {
  MockEventRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> createEvent(_i3.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #createEvent,
          [event],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.Event?> getEventById(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getEventById,
          [eventId],
        ),
        returnValue: _i5.Future<_i3.Event?>.value(),
      ) as _i5.Future<_i3.Event?>);

  @override
  _i5.Future<void> updateEvent(_i3.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #updateEvent,
          [event],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteEvent(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #deleteEvent,
          [eventId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.Event>> getGroupEvents(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupEvents,
          [groupId],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);

  @override
  _i5.Future<List<_i3.Event>> getEventsByStatus(
    String? groupId,
    _i7.EventStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventsByStatus,
          [
            groupId,
            status,
          ],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);

  @override
  _i5.Future<List<_i3.Event>> getActiveEvents(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveEvents,
          [groupId],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);

  @override
  _i5.Future<List<_i3.Event>> getAllActiveEvents() => (super.noSuchMethod(
        Invocation.method(
          #getAllActiveEvents,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);

  @override
  _i5.Future<List<_i3.Event>> getScheduledEvents(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScheduledEvents,
          [groupId],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);

  @override
  _i5.Future<List<_i3.Event>> getTeamEligibleEvents(
    String? groupId,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamEligibleEvents,
          [
            groupId,
            teamId,
          ],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);

  @override
  _i5.Future<List<_i3.Event>> getEventsWithUpcomingDeadlines(
    String? groupId, {
    int? daysAhead = 7,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventsWithUpcomingDeadlines,
          [groupId],
          {#daysAhead: daysAhead},
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);

  @override
  _i5.Stream<List<_i3.Event>> streamGroupEvents(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroupEvents,
          [groupId],
        ),
        returnValue: _i5.Stream<List<_i3.Event>>.empty(),
      ) as _i5.Stream<List<_i3.Event>>);

  @override
  _i5.Stream<_i3.Event?> streamEvent(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #streamEvent,
          [eventId],
        ),
        returnValue: _i5.Stream<_i3.Event?>.empty(),
      ) as _i5.Stream<_i3.Event?>);

  @override
  _i5.Future<void> updateEventStatus(
    String? eventId,
    _i7.EventStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEventStatus,
          [
            eventId,
            status,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateEventSchedule(
    String? eventId, {
    DateTime? startTime,
    DateTime? endTime,
    DateTime? submissionDeadline,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEventSchedule,
          [eventId],
          {
            #startTime: startTime,
            #endTime: endTime,
            #submissionDeadline: submissionDeadline,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> eventExists(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #eventExists,
          [eventId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<int> getGroupEventsCount(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #getGroupEventsCount,
          [groupId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.Event>> searchEventsByTitle(
    String? groupId,
    String? searchTerm,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchEventsByTitle,
          [
            groupId,
            searchTerm,
          ],
        ),
        returnValue: _i5.Future<List<_i3.Event>>.value(<_i3.Event>[]),
      ) as _i5.Future<List<_i3.Event>>);

  @override
  _i5.Future<void> updateEventAccess(
    String? eventId, {
    List<String>? eligibleTeamIds,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEventAccess,
          [eventId],
          {#eligibleTeamIds: eligibleTeamIds},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<String>> getAllGroupTeamIds(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGroupTeamIds,
          [groupId],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<String>> validateTeamsInGroup(
    String? groupId,
    List<String>? teamIds,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateTeamsInGroup,
          [
            groupId,
            teamIds,
          ],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<bool> hasTeamCompletedEvent(
    String? eventId,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasTeamCompletedEvent,
          [
            eventId,
            teamId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.Event> update(_i3.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [event],
        ),
        returnValue: _i5.Future<_i3.Event>.value(_FakeEvent_1(
          this,
          Invocation.method(
            #update,
            [event],
          ),
        )),
      ) as _i5.Future<_i3.Event>);
}

/// A class which mocks [SubmissionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubmissionRepository extends _i1.Mock
    implements _i10.SubmissionRepository {
  MockSubmissionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Submission> create(_i3.Submission? submission) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [submission],
        ),
        returnValue: _i5.Future<_i3.Submission>.value(_FakeSubmission_2(
          this,
          Invocation.method(
            #create,
            [submission],
          ),
        )),
      ) as _i5.Future<_i3.Submission>);

  @override
  _i5.Future<_i3.Submission?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i3.Submission?>.value(),
      ) as _i5.Future<_i3.Submission?>);

  @override
  _i5.Future<_i3.Submission> update(_i3.Submission? submission) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [submission],
        ),
        returnValue: _i5.Future<_i3.Submission>.value(_FakeSubmission_2(
          this,
          Invocation.method(
            #update,
            [submission],
          ),
        )),
      ) as _i5.Future<_i3.Submission>);

  @override
  _i5.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.Submission>> getByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEventId,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i3.Submission>>.value(<_i3.Submission>[]),
      ) as _i5.Future<List<_i3.Submission>>);

  @override
  _i5.Future<List<_i3.Submission>> getByTeamId(String? teamId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByTeamId,
          [teamId],
        ),
        returnValue: _i5.Future<List<_i3.Submission>>.value(<_i3.Submission>[]),
      ) as _i5.Future<List<_i3.Submission>>);

  @override
  _i5.Future<List<_i3.Submission>> getByMemberId(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByMemberId,
          [memberId],
        ),
        returnValue: _i5.Future<List<_i3.Submission>>.value(<_i3.Submission>[]),
      ) as _i5.Future<List<_i3.Submission>>);

  @override
  _i5.Future<String> uploadFile(
    String? submissionId,
    _i11.File? file,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            submissionId,
            file,
            fileName,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #uploadFile,
            [
              submissionId,
              file,
              fileName,
            ],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<List<String>> uploadFiles(
    String? submissionId,
    List<_i11.File>? files,
    List<String>? fileNames,
    void Function(double)? onProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFiles,
          [
            submissionId,
            files,
            fileNames,
            onProgress,
          ],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<void> deleteFile(
    String? submissionId,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [
            submissionId,
            fileName,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<List<_i3.Submission>> streamByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamByEventId,
          [eventId],
        ),
        returnValue: _i5.Stream<List<_i3.Submission>>.empty(),
      ) as _i5.Stream<List<_i3.Submission>>);

  @override
  _i5.Stream<_i3.Submission?> streamById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #streamById,
          [id],
        ),
        returnValue: _i5.Stream<_i3.Submission?>.empty(),
      ) as _i5.Stream<_i3.Submission?>);

  @override
  _i5.Future<List<_i3.Submission>> getSubmissionsPaginated({
    String? eventId,
    String? teamId,
    _i13.DocumentSnapshot<Object?>? startAfter,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubmissionsPaginated,
          [],
          {
            #eventId: eventId,
            #teamId: teamId,
            #startAfter: startAfter,
            #limit: limit,
          },
        ),
        returnValue: _i5.Future<List<_i3.Submission>>.value(<_i3.Submission>[]),
      ) as _i5.Future<List<_i3.Submission>>);

  @override
  _i5.Future<bool> hasTeamSubmitted(
    String? eventId,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasTeamSubmitted,
          [
            eventId,
            teamId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<int> getSubmissionCount(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getSubmissionCount,
          [eventId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i3.Submission>> getDraftSubmissionsByEvent(
          String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDraftSubmissionsByEvent,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i3.Submission>>.value(<_i3.Submission>[]),
      ) as _i5.Future<List<_i3.Submission>>);
}

/// A class which mocks [PostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRepository extends _i1.Mock implements _i14.PostRepository {
  MockPostRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Post> createPost(_i3.Post? post) => (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [post],
        ),
        returnValue: _i5.Future<_i3.Post>.value(_FakePost_3(
          this,
          Invocation.method(
            #createPost,
            [post],
          ),
        )),
      ) as _i5.Future<_i3.Post>);

  @override
  _i5.Future<List<_i3.Post>> getGroupPosts({
    required String? groupId,
    int? limit = 20,
    String? lastPostId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupPosts,
          [],
          {
            #groupId: groupId,
            #limit: limit,
            #lastPostId: lastPostId,
          },
        ),
        returnValue: _i5.Future<List<_i3.Post>>.value(<_i3.Post>[]),
      ) as _i5.Future<List<_i3.Post>>);

  @override
  _i5.Future<List<_i3.Post>> getFeedPosts({
    required List<String>? groupIds,
    int? limit = 20,
    String? lastPostId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFeedPosts,
          [],
          {
            #groupIds: groupIds,
            #limit: limit,
            #lastPostId: lastPostId,
          },
        ),
        returnValue: _i5.Future<List<_i3.Post>>.value(<_i3.Post>[]),
      ) as _i5.Future<List<_i3.Post>>);

  @override
  _i5.Future<_i3.Post?> getPost(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #getPost,
          [postId],
        ),
        returnValue: _i5.Future<_i3.Post?>.value(),
      ) as _i5.Future<_i3.Post?>);

  @override
  _i5.Future<_i3.Post> updatePost(_i3.Post? post) => (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [post],
        ),
        returnValue: _i5.Future<_i3.Post>.value(_FakePost_3(
          this,
          Invocation.method(
            #updatePost,
            [post],
          ),
        )),
      ) as _i5.Future<_i3.Post>);

  @override
  _i5.Future<void> deletePost(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [postId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<String>> uploadMediaFiles(List<_i11.File>? files) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadMediaFiles,
          [files],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<void> likePost(_i3.PostLike? like) => (super.noSuchMethod(
        Invocation.method(
          #likePost,
          [like],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> unlikePost(
    String? postId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlikePost,
          [
            postId,
            memberId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.PostLike?> getPostLike(
    String? postId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostLike,
          [
            postId,
            memberId,
          ],
        ),
        returnValue: _i5.Future<_i3.PostLike?>.value(),
      ) as _i5.Future<_i3.PostLike?>);

  @override
  _i5.Future<List<_i3.PostLike>> getPostLikes(
    String? postId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostLikes,
          [
            postId,
            limit,
          ],
        ),
        returnValue: _i5.Future<List<_i3.PostLike>>.value(<_i3.PostLike>[]),
      ) as _i5.Future<List<_i3.PostLike>>);

  @override
  _i5.Future<_i3.PostComment> addComment(_i3.PostComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i5.Future<_i3.PostComment>.value(_FakePostComment_4(
          this,
          Invocation.method(
            #addComment,
            [comment],
          ),
        )),
      ) as _i5.Future<_i3.PostComment>);

  @override
  _i5.Future<List<_i3.PostComment>> getPostComments({
    required String? postId,
    int? limit = 50,
    String? lastCommentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostComments,
          [],
          {
            #postId: postId,
            #limit: limit,
            #lastCommentId: lastCommentId,
          },
        ),
        returnValue:
            _i5.Future<List<_i3.PostComment>>.value(<_i3.PostComment>[]),
      ) as _i5.Future<List<_i3.PostComment>>);

  @override
  _i5.Future<_i3.PostComment?> getComment(String? commentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComment,
          [commentId],
        ),
        returnValue: _i5.Future<_i3.PostComment?>.value(),
      ) as _i5.Future<_i3.PostComment?>);

  @override
  _i5.Future<_i3.PostComment> updateComment(_i3.PostComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateComment,
          [comment],
        ),
        returnValue: _i5.Future<_i3.PostComment>.value(_FakePostComment_4(
          this,
          Invocation.method(
            #updateComment,
            [comment],
          ),
        )),
      ) as _i5.Future<_i3.PostComment>);

  @override
  _i5.Future<void> deleteComment(String? commentId) => (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [commentId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> likeComment(_i3.CommentLike? like) => (super.noSuchMethod(
        Invocation.method(
          #likeComment,
          [like],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> unlikeComment(
    String? commentId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlikeComment,
          [
            commentId,
            memberId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.CommentLike?> getCommentLike(
    String? commentId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentLike,
          [
            commentId,
            memberId,
          ],
        ),
        returnValue: _i5.Future<_i3.CommentLike?>.value(),
      ) as _i5.Future<_i3.CommentLike?>);

  @override
  _i5.Future<List<_i3.Post>> searchPosts({
    required String? query,
    required List<String>? groupIds,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchPosts,
          [],
          {
            #query: query,
            #groupIds: groupIds,
            #limit: limit,
          },
        ),
        returnValue: _i5.Future<List<_i3.Post>>.value(<_i3.Post>[]),
      ) as _i5.Future<List<_i3.Post>>);

  @override
  _i5.Future<List<_i3.Post>> getAuthorPosts({
    required String? authorId,
    required List<String>? groupIds,
    int? limit = 20,
    String? lastPostId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthorPosts,
          [],
          {
            #authorId: authorId,
            #groupIds: groupIds,
            #limit: limit,
            #lastPostId: lastPostId,
          },
        ),
        returnValue: _i5.Future<List<_i3.Post>>.value(<_i3.Post>[]),
      ) as _i5.Future<List<_i3.Post>>);

  @override
  _i5.Stream<List<_i3.Post>> getGroupPostsStream({
    required String? groupId,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupPostsStream,
          [],
          {
            #groupId: groupId,
            #limit: limit,
          },
        ),
        returnValue: _i5.Stream<List<_i3.Post>>.empty(),
      ) as _i5.Stream<List<_i3.Post>>);

  @override
  _i5.Stream<List<_i3.PostComment>> getPostCommentsStream({
    required String? postId,
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostCommentsStream,
          [],
          {
            #postId: postId,
            #limit: limit,
          },
        ),
        returnValue: _i5.Stream<List<_i3.PostComment>>.empty(),
      ) as _i5.Stream<List<_i3.PostComment>>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i15.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void registerChannelHandler(
    _i3.NotificationChannel? channel,
    _i15.NotificationChannelHandler? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #registerChannelHandler,
          [
            channel,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> sendNotification(_i3.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNotification,
          [notification],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendEventReminder({
    required _i3.Event? event,
    required List<String>? memberIds,
    required Duration? timeUntilEvent,
    _i3.NotificationPriority? priority = _i3.NotificationPriority.normal,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEventReminder,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #timeUntilEvent: timeUntilEvent,
            #priority: priority,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendDeadlineAlert({
    required _i3.Event? event,
    required List<String>? memberIds,
    required Duration? timeUntilDeadline,
    bool? isEscalated = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineAlert,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #timeUntilDeadline: timeUntilDeadline,
            #isEscalated: isEscalated,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendResultAnnouncement({
    required _i3.Event? event,
    required List<String>? memberIds,
    required String? resultSummary,
    Map<String, dynamic>? additionalData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendResultAnnouncement,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #resultSummary: resultSummary,
            #additionalData: additionalData,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendLeaderboardUpdate({
    required _i3.Event? event,
    required List<String>? memberIds,
    required String? updateMessage,
    Map<String, dynamic>? leaderboardData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendLeaderboardUpdate,
          [],
          {
            #event: event,
            #memberIds: memberIds,
            #updateMessage: updateMessage,
            #leaderboardData: leaderboardData,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendDeadlineAutoCloseNotification(
    String? memberId,
    _i3.Event? event,
    _i3.Submission? submission,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineAutoCloseNotification,
          [
            memberId,
            event,
            submission,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendDeadlinePassedNotification(
    _i3.Event? event,
    int? autoClosedCount,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlinePassedNotification,
          [
            event,
            autoClosedCount,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendDeadlineReminderNotification(
    String? memberId,
    _i3.Event? event,
    Duration? timeRemaining,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineReminderNotification,
          [
            memberId,
            event,
            timeRemaining,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> sendOrganizerDeadlineReminder(
    _i3.Event? event,
    Duration? timeRemaining,
    int? pendingSubmissions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOrganizerDeadlineReminder,
          [
            event,
            timeRemaining,
            pendingSubmissions,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> scheduleNotification(_i3.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleNotification,
          [notification],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> processScheduledNotifications() => (super.noSuchMethod(
        Invocation.method(
          #processScheduledNotifications,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.Notification>> getMemberNotifications(
    String? memberId, {
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberNotifications,
          [memberId],
          {#limit: limit},
        ),
        returnValue:
            _i5.Future<List<_i3.Notification>>.value(<_i3.Notification>[]),
      ) as _i5.Future<List<_i3.Notification>>);

  @override
  _i5.Future<void> markAsRead(String? notificationId) => (super.noSuchMethod(
        Invocation.method(
          #markAsRead,
          [notificationId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> markAllAsRead(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #markAllAsRead,
          [memberId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int> getUnreadCount(String? memberId) => (super.noSuchMethod(
        Invocation.method(
          #getUnreadCount,
          [memberId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Stream<List<_i3.Notification>> streamNotifications(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamNotifications,
          [memberId],
        ),
        returnValue: _i5.Stream<List<_i3.Notification>>.empty(),
      ) as _i5.Stream<List<_i3.Notification>>);

  @override
  _i5.Future<void> saveNotificationPreferences(
          _i3.NotificationPreferences? preferences) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveNotificationPreferences,
          [preferences],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.NotificationPreferences> getNotificationPreferences(
          String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotificationPreferences,
          [memberId],
        ),
        returnValue: _i5.Future<_i3.NotificationPreferences>.value(
            _FakeNotificationPreferences_5(
          this,
          Invocation.method(
            #getNotificationPreferences,
            [memberId],
          ),
        )),
      ) as _i5.Future<_i3.NotificationPreferences>);
}
