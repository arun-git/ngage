// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/post_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ngage/models/models.dart' as _i2;
import 'package:ngage/repositories/post_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePost_0 extends _i1.SmartFake implements _i2.Post {
  _FakePost_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePostComment_1 extends _i1.SmartFake implements _i2.PostComment {
  _FakePostComment_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRepository extends _i1.Mock implements _i3.PostRepository {
  MockPostRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Post> createPost(_i2.Post? post) => (super.noSuchMethod(
        Invocation.method(
          #createPost,
          [post],
        ),
        returnValue: _i4.Future<_i2.Post>.value(_FakePost_0(
          this,
          Invocation.method(
            #createPost,
            [post],
          ),
        )),
      ) as _i4.Future<_i2.Post>);

  @override
  _i4.Future<List<_i2.Post>> getGroupPosts({
    required String? groupId,
    int? limit = 20,
    String? lastPostId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupPosts,
          [],
          {
            #groupId: groupId,
            #limit: limit,
            #lastPostId: lastPostId,
          },
        ),
        returnValue: _i4.Future<List<_i2.Post>>.value(<_i2.Post>[]),
      ) as _i4.Future<List<_i2.Post>>);

  @override
  _i4.Future<List<_i2.Post>> getFeedPosts({
    required List<String>? groupIds,
    int? limit = 20,
    String? lastPostId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFeedPosts,
          [],
          {
            #groupIds: groupIds,
            #limit: limit,
            #lastPostId: lastPostId,
          },
        ),
        returnValue: _i4.Future<List<_i2.Post>>.value(<_i2.Post>[]),
      ) as _i4.Future<List<_i2.Post>>);

  @override
  _i4.Future<_i2.Post?> getPost(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #getPost,
          [postId],
        ),
        returnValue: _i4.Future<_i2.Post?>.value(),
      ) as _i4.Future<_i2.Post?>);

  @override
  _i4.Future<_i2.Post> updatePost(_i2.Post? post) => (super.noSuchMethod(
        Invocation.method(
          #updatePost,
          [post],
        ),
        returnValue: _i4.Future<_i2.Post>.value(_FakePost_0(
          this,
          Invocation.method(
            #updatePost,
            [post],
          ),
        )),
      ) as _i4.Future<_i2.Post>);

  @override
  _i4.Future<void> deletePost(String? postId) => (super.noSuchMethod(
        Invocation.method(
          #deletePost,
          [postId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<String>> uploadMediaFiles(List<_i5.File>? files) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadMediaFiles,
          [files],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> likePost(_i2.PostLike? like) => (super.noSuchMethod(
        Invocation.method(
          #likePost,
          [like],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unlikePost(
    String? postId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlikePost,
          [
            postId,
            memberId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.PostLike?> getPostLike(
    String? postId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostLike,
          [
            postId,
            memberId,
          ],
        ),
        returnValue: _i4.Future<_i2.PostLike?>.value(),
      ) as _i4.Future<_i2.PostLike?>);

  @override
  _i4.Future<List<_i2.PostLike>> getPostLikes(
    String? postId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostLikes,
          [
            postId,
            limit,
          ],
        ),
        returnValue: _i4.Future<List<_i2.PostLike>>.value(<_i2.PostLike>[]),
      ) as _i4.Future<List<_i2.PostLike>>);

  @override
  _i4.Future<_i2.PostComment> addComment(_i2.PostComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i4.Future<_i2.PostComment>.value(_FakePostComment_1(
          this,
          Invocation.method(
            #addComment,
            [comment],
          ),
        )),
      ) as _i4.Future<_i2.PostComment>);

  @override
  _i4.Future<List<_i2.PostComment>> getPostComments({
    required String? postId,
    int? limit = 50,
    String? lastCommentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostComments,
          [],
          {
            #postId: postId,
            #limit: limit,
            #lastCommentId: lastCommentId,
          },
        ),
        returnValue:
            _i4.Future<List<_i2.PostComment>>.value(<_i2.PostComment>[]),
      ) as _i4.Future<List<_i2.PostComment>>);

  @override
  _i4.Future<_i2.PostComment?> getComment(String? commentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getComment,
          [commentId],
        ),
        returnValue: _i4.Future<_i2.PostComment?>.value(),
      ) as _i4.Future<_i2.PostComment?>);

  @override
  _i4.Future<_i2.PostComment> updateComment(_i2.PostComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateComment,
          [comment],
        ),
        returnValue: _i4.Future<_i2.PostComment>.value(_FakePostComment_1(
          this,
          Invocation.method(
            #updateComment,
            [comment],
          ),
        )),
      ) as _i4.Future<_i2.PostComment>);

  @override
  _i4.Future<void> deleteComment(String? commentId) => (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [commentId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> likeComment(_i2.CommentLike? like) => (super.noSuchMethod(
        Invocation.method(
          #likeComment,
          [like],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> unlikeComment(
    String? commentId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlikeComment,
          [
            commentId,
            memberId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.CommentLike?> getCommentLike(
    String? commentId,
    String? memberId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentLike,
          [
            commentId,
            memberId,
          ],
        ),
        returnValue: _i4.Future<_i2.CommentLike?>.value(),
      ) as _i4.Future<_i2.CommentLike?>);

  @override
  _i4.Future<List<_i2.Post>> searchPosts({
    required String? query,
    required List<String>? groupIds,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchPosts,
          [],
          {
            #query: query,
            #groupIds: groupIds,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<List<_i2.Post>>.value(<_i2.Post>[]),
      ) as _i4.Future<List<_i2.Post>>);

  @override
  _i4.Future<List<_i2.Post>> getAuthorPosts({
    required String? authorId,
    required List<String>? groupIds,
    int? limit = 20,
    String? lastPostId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuthorPosts,
          [],
          {
            #authorId: authorId,
            #groupIds: groupIds,
            #limit: limit,
            #lastPostId: lastPostId,
          },
        ),
        returnValue: _i4.Future<List<_i2.Post>>.value(<_i2.Post>[]),
      ) as _i4.Future<List<_i2.Post>>);

  @override
  _i4.Stream<List<_i2.Post>> getGroupPostsStream({
    required String? groupId,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupPostsStream,
          [],
          {
            #groupId: groupId,
            #limit: limit,
          },
        ),
        returnValue: _i4.Stream<List<_i2.Post>>.empty(),
      ) as _i4.Stream<List<_i2.Post>>);

  @override
  _i4.Stream<List<_i2.PostComment>> getPostCommentsStream({
    required String? postId,
    int? limit = 50,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostCommentsStream,
          [],
          {
            #postId: postId,
            #limit: limit,
          },
        ),
        returnValue: _i4.Stream<List<_i2.PostComment>>.empty(),
      ) as _i4.Stream<List<_i2.PostComment>>);
}
