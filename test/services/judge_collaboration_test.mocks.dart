// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/judge_collaboration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i10;

import 'package:cloud_firestore/cloud_firestore.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:ngage/models/models.dart' as _i2;
import 'package:ngage/repositories/judge_assignment_repository.dart' as _i7;
import 'package:ngage/repositories/judge_comment_repository.dart' as _i4;
import 'package:ngage/repositories/score_repository.dart' as _i3;
import 'package:ngage/repositories/scoring_rubric_repository.dart' as _i8;
import 'package:ngage/repositories/submission_repository.dart' as _i9;
import 'package:ngage/repositories/team_repository.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJudgeComment_0 extends _i1.SmartFake implements _i2.JudgeComment {
  _FakeJudgeComment_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeJudgeAssignment_1 extends _i1.SmartFake
    implements _i2.JudgeAssignment {
  _FakeJudgeAssignment_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScore_2 extends _i1.SmartFake implements _i2.Score {
  _FakeScore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScoreStatistics_3 extends _i1.SmartFake
    implements _i3.ScoreStatistics {
  _FakeScoreStatistics_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScoringRubric_4 extends _i1.SmartFake implements _i2.ScoringRubric {
  _FakeScoringRubric_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSubmission_5 extends _i1.SmartFake implements _i2.Submission {
  _FakeSubmission_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [JudgeCommentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockJudgeCommentRepository extends _i1.Mock
    implements _i4.JudgeCommentRepository {
  MockJudgeCommentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.JudgeComment> create(_i2.JudgeComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [comment],
        ),
        returnValue: _i5.Future<_i2.JudgeComment>.value(_FakeJudgeComment_0(
          this,
          Invocation.method(
            #create,
            [comment],
          ),
        )),
      ) as _i5.Future<_i2.JudgeComment>);

  @override
  _i5.Future<_i2.JudgeComment?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i2.JudgeComment?>.value(),
      ) as _i5.Future<_i2.JudgeComment?>);

  @override
  _i5.Future<List<_i2.JudgeComment>> getBySubmissionId(String? submissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBySubmissionId,
          [submissionId],
        ),
        returnValue:
            _i5.Future<List<_i2.JudgeComment>>.value(<_i2.JudgeComment>[]),
      ) as _i5.Future<List<_i2.JudgeComment>>);

  @override
  _i5.Future<List<_i2.JudgeComment>> getByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEventId,
          [eventId],
        ),
        returnValue:
            _i5.Future<List<_i2.JudgeComment>>.value(<_i2.JudgeComment>[]),
      ) as _i5.Future<List<_i2.JudgeComment>>);

  @override
  _i5.Future<List<_i2.JudgeComment>> getByJudgeId(String? judgeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByJudgeId,
          [judgeId],
        ),
        returnValue:
            _i5.Future<List<_i2.JudgeComment>>.value(<_i2.JudgeComment>[]),
      ) as _i5.Future<List<_i2.JudgeComment>>);

  @override
  _i5.Future<List<_i2.JudgeComment>> getReplies(String? parentCommentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReplies,
          [parentCommentId],
        ),
        returnValue:
            _i5.Future<List<_i2.JudgeComment>>.value(<_i2.JudgeComment>[]),
      ) as _i5.Future<List<_i2.JudgeComment>>);

  @override
  _i5.Future<List<_i2.JudgeComment>> getTopLevelComments(
          String? submissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopLevelComments,
          [submissionId],
        ),
        returnValue:
            _i5.Future<List<_i2.JudgeComment>>.value(<_i2.JudgeComment>[]),
      ) as _i5.Future<List<_i2.JudgeComment>>);

  @override
  _i5.Future<_i2.JudgeComment> update(_i2.JudgeComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [comment],
        ),
        returnValue: _i5.Future<_i2.JudgeComment>.value(_FakeJudgeComment_0(
          this,
          Invocation.method(
            #update,
            [comment],
          ),
        )),
      ) as _i5.Future<_i2.JudgeComment>);

  @override
  _i5.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.JudgeComment>> getCommentsPaginated({
    String? submissionId,
    String? eventId,
    String? judgeId,
    int? limit = 20,
    _i6.DocumentSnapshot<Object?>? startAfter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentsPaginated,
          [],
          {
            #submissionId: submissionId,
            #eventId: eventId,
            #judgeId: judgeId,
            #limit: limit,
            #startAfter: startAfter,
          },
        ),
        returnValue:
            _i5.Future<List<_i2.JudgeComment>>.value(<_i2.JudgeComment>[]),
      ) as _i5.Future<List<_i2.JudgeComment>>);

  @override
  _i5.Stream<List<_i2.JudgeComment>> streamBySubmissionId(
          String? submissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamBySubmissionId,
          [submissionId],
        ),
        returnValue: _i5.Stream<List<_i2.JudgeComment>>.empty(),
      ) as _i5.Stream<List<_i2.JudgeComment>>);

  @override
  _i5.Stream<List<_i2.JudgeComment>> streamByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamByEventId,
          [eventId],
        ),
        returnValue: _i5.Stream<List<_i2.JudgeComment>>.empty(),
      ) as _i5.Stream<List<_i2.JudgeComment>>);

  @override
  _i5.Future<int> getCommentCount(String? submissionId) => (super.noSuchMethod(
        Invocation.method(
          #getCommentCount,
          [submissionId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<bool> hasJudgeCommented(
    String? submissionId,
    String? judgeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasJudgeCommented,
          [
            submissionId,
            judgeId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [JudgeAssignmentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockJudgeAssignmentRepository extends _i1.Mock
    implements _i7.JudgeAssignmentRepository {
  MockJudgeAssignmentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.JudgeAssignment> create(_i2.JudgeAssignment? assignment) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [assignment],
        ),
        returnValue:
            _i5.Future<_i2.JudgeAssignment>.value(_FakeJudgeAssignment_1(
          this,
          Invocation.method(
            #create,
            [assignment],
          ),
        )),
      ) as _i5.Future<_i2.JudgeAssignment>);

  @override
  _i5.Future<_i2.JudgeAssignment?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i2.JudgeAssignment?>.value(),
      ) as _i5.Future<_i2.JudgeAssignment?>);

  @override
  _i5.Future<List<_i2.JudgeAssignment>> getByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEventId,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i2.JudgeAssignment>>.value(
            <_i2.JudgeAssignment>[]),
      ) as _i5.Future<List<_i2.JudgeAssignment>>);

  @override
  _i5.Future<List<_i2.JudgeAssignment>> getActiveByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveByEventId,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i2.JudgeAssignment>>.value(
            <_i2.JudgeAssignment>[]),
      ) as _i5.Future<List<_i2.JudgeAssignment>>);

  @override
  _i5.Future<List<_i2.JudgeAssignment>> getByJudgeId(String? judgeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByJudgeId,
          [judgeId],
        ),
        returnValue: _i5.Future<List<_i2.JudgeAssignment>>.value(
            <_i2.JudgeAssignment>[]),
      ) as _i5.Future<List<_i2.JudgeAssignment>>);

  @override
  _i5.Future<List<_i2.JudgeAssignment>> getActiveByJudgeId(String? judgeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveByJudgeId,
          [judgeId],
        ),
        returnValue: _i5.Future<List<_i2.JudgeAssignment>>.value(
            <_i2.JudgeAssignment>[]),
      ) as _i5.Future<List<_i2.JudgeAssignment>>);

  @override
  _i5.Future<_i2.JudgeAssignment?> getAssignment(
    String? eventId,
    String? judgeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAssignment,
          [
            eventId,
            judgeId,
          ],
        ),
        returnValue: _i5.Future<_i2.JudgeAssignment?>.value(),
      ) as _i5.Future<_i2.JudgeAssignment?>);

  @override
  _i5.Future<_i2.JudgeAssignment?> getActiveAssignment(
    String? eventId,
    String? judgeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveAssignment,
          [
            eventId,
            judgeId,
          ],
        ),
        returnValue: _i5.Future<_i2.JudgeAssignment?>.value(),
      ) as _i5.Future<_i2.JudgeAssignment?>);

  @override
  _i5.Future<_i2.JudgeAssignment> update(_i2.JudgeAssignment? assignment) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [assignment],
        ),
        returnValue:
            _i5.Future<_i2.JudgeAssignment>.value(_FakeJudgeAssignment_1(
          this,
          Invocation.method(
            #update,
            [assignment],
          ),
        )),
      ) as _i5.Future<_i2.JudgeAssignment>);

  @override
  _i5.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.JudgeAssignment>> getAssignmentsPaginated({
    String? eventId,
    String? judgeId,
    bool? isActive,
    int? limit = 20,
    _i6.DocumentSnapshot<Object?>? startAfter,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAssignmentsPaginated,
          [],
          {
            #eventId: eventId,
            #judgeId: judgeId,
            #isActive: isActive,
            #limit: limit,
            #startAfter: startAfter,
          },
        ),
        returnValue: _i5.Future<List<_i2.JudgeAssignment>>.value(
            <_i2.JudgeAssignment>[]),
      ) as _i5.Future<List<_i2.JudgeAssignment>>);

  @override
  _i5.Stream<List<_i2.JudgeAssignment>> streamByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamByEventId,
          [eventId],
        ),
        returnValue: _i5.Stream<List<_i2.JudgeAssignment>>.empty(),
      ) as _i5.Stream<List<_i2.JudgeAssignment>>);

  @override
  _i5.Stream<List<_i2.JudgeAssignment>> streamActiveByEventId(
          String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamActiveByEventId,
          [eventId],
        ),
        returnValue: _i5.Stream<List<_i2.JudgeAssignment>>.empty(),
      ) as _i5.Stream<List<_i2.JudgeAssignment>>);

  @override
  _i5.Future<int> getAssignmentCount(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getAssignmentCount,
          [eventId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> getActiveAssignmentCount(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveAssignmentCount,
          [eventId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<bool> isJudgeAssigned(
    String? eventId,
    String? judgeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isJudgeAssigned,
          [
            eventId,
            judgeId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isJudgeActivelyAssigned(
    String? eventId,
    String? judgeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isJudgeActivelyAssigned,
          [
            eventId,
            judgeId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i2.JudgeAssignment>> getByRole(
    String? eventId,
    _i2.JudgeRole? role,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByRole,
          [
            eventId,
            role,
          ],
        ),
        returnValue: _i5.Future<List<_i2.JudgeAssignment>>.value(
            <_i2.JudgeAssignment>[]),
      ) as _i5.Future<List<_i2.JudgeAssignment>>);

  @override
  _i5.Future<List<_i2.JudgeAssignment>> getLeadJudges(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLeadJudges,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i2.JudgeAssignment>>.value(
            <_i2.JudgeAssignment>[]),
      ) as _i5.Future<List<_i2.JudgeAssignment>>);

  @override
  _i5.Future<List<_i2.JudgeAssignment>> getRegularJudges(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRegularJudges,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i2.JudgeAssignment>>.value(
            <_i2.JudgeAssignment>[]),
      ) as _i5.Future<List<_i2.JudgeAssignment>>);
}

/// A class which mocks [ScoreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockScoreRepository extends _i1.Mock implements _i3.ScoreRepository {
  MockScoreRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Score> create(_i2.Score? score) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [score],
        ),
        returnValue: _i5.Future<_i2.Score>.value(_FakeScore_2(
          this,
          Invocation.method(
            #create,
            [score],
          ),
        )),
      ) as _i5.Future<_i2.Score>);

  @override
  _i5.Future<_i2.Score?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i2.Score?>.value(),
      ) as _i5.Future<_i2.Score?>);

  @override
  _i5.Future<_i2.Score> update(_i2.Score? score) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [score],
        ),
        returnValue: _i5.Future<_i2.Score>.value(_FakeScore_2(
          this,
          Invocation.method(
            #update,
            [score],
          ),
        )),
      ) as _i5.Future<_i2.Score>);

  @override
  _i5.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Score>> getBySubmissionId(String? submissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBySubmissionId,
          [submissionId],
        ),
        returnValue: _i5.Future<List<_i2.Score>>.value(<_i2.Score>[]),
      ) as _i5.Future<List<_i2.Score>>);

  @override
  _i5.Future<List<_i2.Score>> getByJudgeId(
    String? judgeId, {
    String? eventId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByJudgeId,
          [judgeId],
          {#eventId: eventId},
        ),
        returnValue: _i5.Future<List<_i2.Score>>.value(<_i2.Score>[]),
      ) as _i5.Future<List<_i2.Score>>);

  @override
  _i5.Future<List<_i2.Score>> getByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEventId,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i2.Score>>.value(<_i2.Score>[]),
      ) as _i5.Future<List<_i2.Score>>);

  @override
  _i5.Future<_i2.Score?> getBySubmissionAndJudge(
    String? submissionId,
    String? judgeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBySubmissionAndJudge,
          [
            submissionId,
            judgeId,
          ],
        ),
        returnValue: _i5.Future<_i2.Score?>.value(),
      ) as _i5.Future<_i2.Score?>);

  @override
  _i5.Future<Map<String, List<_i2.Score>>> getBySubmissionIds(
          List<String>? submissionIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBySubmissionIds,
          [submissionIds],
        ),
        returnValue: _i5.Future<Map<String, List<_i2.Score>>>.value(
            <String, List<_i2.Score>>{}),
      ) as _i5.Future<Map<String, List<_i2.Score>>>);

  @override
  _i5.Stream<List<_i2.Score>> streamBySubmissionId(String? submissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamBySubmissionId,
          [submissionId],
        ),
        returnValue: _i5.Stream<List<_i2.Score>>.empty(),
      ) as _i5.Stream<List<_i2.Score>>);

  @override
  _i5.Stream<_i2.Score?> streamById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #streamById,
          [id],
        ),
        returnValue: _i5.Stream<_i2.Score?>.empty(),
      ) as _i5.Stream<_i2.Score?>);

  @override
  _i5.Future<double?> getAverageScore(String? submissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAverageScore,
          [submissionId],
        ),
        returnValue: _i5.Future<double?>.value(),
      ) as _i5.Future<double?>);

  @override
  _i5.Future<_i3.ScoreStatistics> getEventScoreStatistics(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEventScoreStatistics,
          [eventId],
        ),
        returnValue:
            _i5.Future<_i3.ScoreStatistics>.value(_FakeScoreStatistics_3(
          this,
          Invocation.method(
            #getEventScoreStatistics,
            [eventId],
          ),
        )),
      ) as _i5.Future<_i3.ScoreStatistics>);

  @override
  _i5.Future<bool> hasJudgeScored(
    String? submissionId,
    String? judgeId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasJudgeScored,
          [
            submissionId,
            judgeId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i2.Score>> getIncompleteScores(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIncompleteScores,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i2.Score>>.value(<_i2.Score>[]),
      ) as _i5.Future<List<_i2.Score>>);

  @override
  _i5.Future<void> deleteBySubmissionId(String? submissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBySubmissionId,
          [submissionId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteByEventId(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #deleteByEventId,
          [eventId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Score>> getScoresPaginated({
    String? eventId,
    String? submissionId,
    String? judgeId,
    _i6.DocumentSnapshot<Object?>? startAfter,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getScoresPaginated,
          [],
          {
            #eventId: eventId,
            #submissionId: submissionId,
            #judgeId: judgeId,
            #startAfter: startAfter,
            #limit: limit,
          },
        ),
        returnValue: _i5.Future<List<_i2.Score>>.value(<_i2.Score>[]),
      ) as _i5.Future<List<_i2.Score>>);
}

/// A class which mocks [ScoringRubricRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockScoringRubricRepository extends _i1.Mock
    implements _i8.ScoringRubricRepository {
  MockScoringRubricRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.ScoringRubric> create(_i2.ScoringRubric? rubric) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [rubric],
        ),
        returnValue: _i5.Future<_i2.ScoringRubric>.value(_FakeScoringRubric_4(
          this,
          Invocation.method(
            #create,
            [rubric],
          ),
        )),
      ) as _i5.Future<_i2.ScoringRubric>);

  @override
  _i5.Future<_i2.ScoringRubric?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i2.ScoringRubric?>.value(),
      ) as _i5.Future<_i2.ScoringRubric?>);

  @override
  _i5.Future<_i2.ScoringRubric> update(_i2.ScoringRubric? rubric) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [rubric],
        ),
        returnValue: _i5.Future<_i2.ScoringRubric>.value(_FakeScoringRubric_4(
          this,
          Invocation.method(
            #update,
            [rubric],
          ),
        )),
      ) as _i5.Future<_i2.ScoringRubric>);

  @override
  _i5.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.ScoringRubric>> getByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEventId,
          [eventId],
        ),
        returnValue:
            _i5.Future<List<_i2.ScoringRubric>>.value(<_i2.ScoringRubric>[]),
      ) as _i5.Future<List<_i2.ScoringRubric>>);

  @override
  _i5.Future<List<_i2.ScoringRubric>> getByGroupId(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByGroupId,
          [groupId],
        ),
        returnValue:
            _i5.Future<List<_i2.ScoringRubric>>.value(<_i2.ScoringRubric>[]),
      ) as _i5.Future<List<_i2.ScoringRubric>>);

  @override
  _i5.Future<List<_i2.ScoringRubric>> getTemplates() => (super.noSuchMethod(
        Invocation.method(
          #getTemplates,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.ScoringRubric>>.value(<_i2.ScoringRubric>[]),
      ) as _i5.Future<List<_i2.ScoringRubric>>);

  @override
  _i5.Future<List<_i2.ScoringRubric>> getByCreator(String? creatorId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByCreator,
          [creatorId],
        ),
        returnValue:
            _i5.Future<List<_i2.ScoringRubric>>.value(<_i2.ScoringRubric>[]),
      ) as _i5.Future<List<_i2.ScoringRubric>>);

  @override
  _i5.Future<List<_i2.ScoringRubric>> searchByName(
    String? searchTerm, {
    String? groupId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchByName,
          [searchTerm],
          {#groupId: groupId},
        ),
        returnValue:
            _i5.Future<List<_i2.ScoringRubric>>.value(<_i2.ScoringRubric>[]),
      ) as _i5.Future<List<_i2.ScoringRubric>>);

  @override
  _i5.Future<_i2.ScoringRubric> clone(
    String? rubricId, {
    String? newName,
    String? newEventId,
    String? newGroupId,
    bool? isTemplate,
    required String? createdBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clone,
          [rubricId],
          {
            #newName: newName,
            #newEventId: newEventId,
            #newGroupId: newGroupId,
            #isTemplate: isTemplate,
            #createdBy: createdBy,
          },
        ),
        returnValue: _i5.Future<_i2.ScoringRubric>.value(_FakeScoringRubric_4(
          this,
          Invocation.method(
            #clone,
            [rubricId],
            {
              #newName: newName,
              #newEventId: newEventId,
              #newGroupId: newGroupId,
              #isTemplate: isTemplate,
              #createdBy: createdBy,
            },
          ),
        )),
      ) as _i5.Future<_i2.ScoringRubric>);

  @override
  _i5.Future<_i2.ScoringRubric> createFromTemplate(
    String? templateId, {
    required String? name,
    String? eventId,
    String? groupId,
    required String? createdBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFromTemplate,
          [templateId],
          {
            #name: name,
            #eventId: eventId,
            #groupId: groupId,
            #createdBy: createdBy,
          },
        ),
        returnValue: _i5.Future<_i2.ScoringRubric>.value(_FakeScoringRubric_4(
          this,
          Invocation.method(
            #createFromTemplate,
            [templateId],
            {
              #name: name,
              #eventId: eventId,
              #groupId: groupId,
              #createdBy: createdBy,
            },
          ),
        )),
      ) as _i5.Future<_i2.ScoringRubric>);

  @override
  _i5.Future<List<_i2.ScoringRubric>> getRubricsPaginated({
    String? eventId,
    String? groupId,
    bool? isTemplate,
    _i6.DocumentSnapshot<Object?>? startAfter,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRubricsPaginated,
          [],
          {
            #eventId: eventId,
            #groupId: groupId,
            #isTemplate: isTemplate,
            #startAfter: startAfter,
            #limit: limit,
          },
        ),
        returnValue:
            _i5.Future<List<_i2.ScoringRubric>>.value(<_i2.ScoringRubric>[]),
      ) as _i5.Future<List<_i2.ScoringRubric>>);

  @override
  _i5.Stream<List<_i2.ScoringRubric>> streamByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamByEventId,
          [eventId],
        ),
        returnValue: _i5.Stream<List<_i2.ScoringRubric>>.empty(),
      ) as _i5.Stream<List<_i2.ScoringRubric>>);

  @override
  _i5.Stream<_i2.ScoringRubric?> streamById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #streamById,
          [id],
        ),
        returnValue: _i5.Stream<_i2.ScoringRubric?>.empty(),
      ) as _i5.Stream<_i2.ScoringRubric?>);

  @override
  _i5.Future<bool> exists(String? id) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [id],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<int> getGroupRubricCount(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #getGroupRubricCount,
          [groupId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> getTemplateCount() => (super.noSuchMethod(
        Invocation.method(
          #getTemplateCount,
          [],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> deleteByEventId(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #deleteByEventId,
          [eventId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteByGroupId(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #deleteByGroupId,
          [groupId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> validateRubric(_i2.ScoringRubric? rubric) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateRubric,
          [rubric],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [SubmissionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubmissionRepository extends _i1.Mock
    implements _i9.SubmissionRepository {
  MockSubmissionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Submission> create(_i2.Submission? submission) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [submission],
        ),
        returnValue: _i5.Future<_i2.Submission>.value(_FakeSubmission_5(
          this,
          Invocation.method(
            #create,
            [submission],
          ),
        )),
      ) as _i5.Future<_i2.Submission>);

  @override
  _i5.Future<_i2.Submission?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i2.Submission?>.value(),
      ) as _i5.Future<_i2.Submission?>);

  @override
  _i5.Future<_i2.Submission> update(_i2.Submission? submission) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [submission],
        ),
        returnValue: _i5.Future<_i2.Submission>.value(_FakeSubmission_5(
          this,
          Invocation.method(
            #update,
            [submission],
          ),
        )),
      ) as _i5.Future<_i2.Submission>);

  @override
  _i5.Future<void> delete(String? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Submission>> getByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByEventId,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i5.Future<List<_i2.Submission>>);

  @override
  _i5.Future<List<_i2.Submission>> getByTeamId(String? teamId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByTeamId,
          [teamId],
        ),
        returnValue: _i5.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i5.Future<List<_i2.Submission>>);

  @override
  _i5.Future<List<_i2.Submission>> getByMemberId(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByMemberId,
          [memberId],
        ),
        returnValue: _i5.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i5.Future<List<_i2.Submission>>);

  @override
  _i5.Future<String> uploadFile(
    String? submissionId,
    _i10.File? file,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFile,
          [
            submissionId,
            file,
            fileName,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #uploadFile,
            [
              submissionId,
              file,
              fileName,
            ],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<List<String>> uploadFiles(
    String? submissionId,
    List<_i10.File>? files,
    List<String>? fileNames,
    void Function(double)? onProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadFiles,
          [
            submissionId,
            files,
            fileNames,
            onProgress,
          ],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<void> deleteFile(
    String? submissionId,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [
            submissionId,
            fileName,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<List<_i2.Submission>> streamByEventId(String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamByEventId,
          [eventId],
        ),
        returnValue: _i5.Stream<List<_i2.Submission>>.empty(),
      ) as _i5.Stream<List<_i2.Submission>>);

  @override
  _i5.Stream<_i2.Submission?> streamById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #streamById,
          [id],
        ),
        returnValue: _i5.Stream<_i2.Submission?>.empty(),
      ) as _i5.Stream<_i2.Submission?>);

  @override
  _i5.Future<List<_i2.Submission>> getSubmissionsPaginated({
    String? eventId,
    String? teamId,
    _i6.DocumentSnapshot<Object?>? startAfter,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubmissionsPaginated,
          [],
          {
            #eventId: eventId,
            #teamId: teamId,
            #startAfter: startAfter,
            #limit: limit,
          },
        ),
        returnValue: _i5.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i5.Future<List<_i2.Submission>>);

  @override
  _i5.Future<bool> hasTeamSubmitted(
    String? eventId,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasTeamSubmitted,
          [
            eventId,
            teamId,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<int> getSubmissionCount(String? eventId) => (super.noSuchMethod(
        Invocation.method(
          #getSubmissionCount,
          [eventId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<List<_i2.Submission>> getDraftSubmissionsByEvent(
          String? eventId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDraftSubmissionsByEvent,
          [eventId],
        ),
        returnValue: _i5.Future<List<_i2.Submission>>.value(<_i2.Submission>[]),
      ) as _i5.Future<List<_i2.Submission>>);
}

/// A class which mocks [TeamRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTeamRepository extends _i1.Mock implements _i12.TeamRepository {
  MockTeamRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> createTeam(_i2.Team? team) => (super.noSuchMethod(
        Invocation.method(
          #createTeam,
          [team],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.Team?> getTeamById(String? teamId) => (super.noSuchMethod(
        Invocation.method(
          #getTeamById,
          [teamId],
        ),
        returnValue: _i5.Future<_i2.Team?>.value(),
      ) as _i5.Future<_i2.Team?>);

  @override
  _i5.Future<void> updateTeam(_i2.Team? team) => (super.noSuchMethod(
        Invocation.method(
          #updateTeam,
          [team],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTeam(String? teamId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTeam,
          [teamId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Team>> getTeamsByGroupId(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamsByGroupId,
          [groupId],
        ),
        returnValue: _i5.Future<List<_i2.Team>>.value(<_i2.Team>[]),
      ) as _i5.Future<List<_i2.Team>>);

  @override
  _i5.Future<List<_i2.Team>> getTeamsByTeamLead(String? teamLeadId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamsByTeamLead,
          [teamLeadId],
        ),
        returnValue: _i5.Future<List<_i2.Team>>.value(<_i2.Team>[]),
      ) as _i5.Future<List<_i2.Team>>);

  @override
  _i5.Future<List<_i2.Team>> getTeamsByMember(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamsByMember,
          [memberId],
        ),
        returnValue: _i5.Future<List<_i2.Team>>.value(<_i2.Team>[]),
      ) as _i5.Future<List<_i2.Team>>);

  @override
  _i5.Future<List<_i2.Team>> getTeamsByType(
    String? groupId,
    String? teamType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamsByType,
          [
            groupId,
            teamType,
          ],
        ),
        returnValue: _i5.Future<List<_i2.Team>>.value(<_i2.Team>[]),
      ) as _i5.Future<List<_i2.Team>>);

  @override
  _i5.Future<List<_i2.Team>> getTeamsByIds(List<String>? teamIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamsByIds,
          [teamIds],
        ),
        returnValue: _i5.Future<List<_i2.Team>>.value(<_i2.Team>[]),
      ) as _i5.Future<List<_i2.Team>>);

  @override
  _i5.Stream<List<_i2.Team>> streamTeamsByGroupId(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamTeamsByGroupId,
          [groupId],
        ),
        returnValue: _i5.Stream<List<_i2.Team>>.empty(),
      ) as _i5.Stream<List<_i2.Team>>);

  @override
  _i5.Stream<List<_i2.Team>> streamTeamsByMember(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamTeamsByMember,
          [memberId],
        ),
        returnValue: _i5.Stream<List<_i2.Team>>.empty(),
      ) as _i5.Stream<List<_i2.Team>>);

  @override
  _i5.Stream<_i2.Team?> streamTeamById(String? teamId) => (super.noSuchMethod(
        Invocation.method(
          #streamTeamById,
          [teamId],
        ),
        returnValue: _i5.Stream<_i2.Team?>.empty(),
      ) as _i5.Stream<_i2.Team?>);

  @override
  _i5.Future<int> getTeamCountByGroup(String? groupId) => (super.noSuchMethod(
        Invocation.method(
          #getTeamCountByGroup,
          [groupId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> getActiveTeamCountForMember(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveTeamCountForMember,
          [memberId],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> softDeleteTeam(String? teamId) => (super.noSuchMethod(
        Invocation.method(
          #softDeleteTeam,
          [teamId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> reactivateTeam(String? teamId) => (super.noSuchMethod(
        Invocation.method(
          #reactivateTeam,
          [teamId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
