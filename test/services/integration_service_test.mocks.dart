// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/integration_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:ngage/models/enums.dart' as _i6;
import 'package:ngage/models/integration.dart' as _i2;
import 'package:ngage/models/models.dart' as _i3;
import 'package:ngage/repositories/integration_repository.dart' as _i4;
import 'package:ngage/services/calendar_service.dart' as _i10;
import 'package:ngage/services/email_service.dart' as _i9;
import 'package:ngage/services/microsoft_teams_service.dart' as _i7;
import 'package:ngage/services/slack_service.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIntegration_0 extends _i1.SmartFake implements _i2.Integration {
  _FakeIntegration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSlackOAuthResponse_1 extends _i1.SmartFake
    implements _i3.SlackOAuthResponse {
  _FakeSlackOAuthResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IntegrationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIntegrationRepository extends _i1.Mock
    implements _i4.IntegrationRepository {
  MockIntegrationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> createIntegration(_i2.Integration? integration) =>
      (super.noSuchMethod(
        Invocation.method(
          #createIntegration,
          [integration],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.Integration?> getIntegrationById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIntegrationById,
          [id],
        ),
        returnValue: _i5.Future<_i2.Integration?>.value(),
      ) as _i5.Future<_i2.Integration?>);

  @override
  _i5.Future<List<_i2.Integration>> getGroupIntegrations(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupIntegrations,
          [groupId],
        ),
        returnValue:
            _i5.Future<List<_i2.Integration>>.value(<_i2.Integration>[]),
      ) as _i5.Future<List<_i2.Integration>>);

  @override
  _i5.Future<List<_i2.Integration>> getActiveGroupIntegrations(
          String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveGroupIntegrations,
          [groupId],
        ),
        returnValue:
            _i5.Future<List<_i2.Integration>>.value(<_i2.Integration>[]),
      ) as _i5.Future<List<_i2.Integration>>);

  @override
  _i5.Future<List<_i2.Integration>> getGroupIntegrationsByType(
    String? groupId,
    _i6.IntegrationType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGroupIntegrationsByType,
          [
            groupId,
            type,
          ],
        ),
        returnValue:
            _i5.Future<List<_i2.Integration>>.value(<_i2.Integration>[]),
      ) as _i5.Future<List<_i2.Integration>>);

  @override
  _i5.Future<void> updateIntegration(_i2.Integration? integration) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateIntegration,
          [integration],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.Integration> setIntegrationActive(
    String? integrationId,
    bool? isActive,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setIntegrationActive,
          [
            integrationId,
            isActive,
          ],
        ),
        returnValue: _i5.Future<_i2.Integration>.value(_FakeIntegration_0(
          this,
          Invocation.method(
            #setIntegrationActive,
            [
              integrationId,
              isActive,
            ],
          ),
        )),
      ) as _i5.Future<_i2.Integration>);

  @override
  _i5.Future<void> updateChannelMappings(
    String? integrationId,
    Map<String, String>? channelMappings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateChannelMappings,
          [
            integrationId,
            channelMappings,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateConfiguration(
    String? integrationId,
    Map<String, dynamic>? configuration,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateConfiguration,
          [
            integrationId,
            configuration,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteIntegration(String? integrationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteIntegration,
          [integrationId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Integration>> getIntegrationsForNotificationType(
          String? notificationType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getIntegrationsForNotificationType,
          [notificationType],
        ),
        returnValue:
            _i5.Future<List<_i2.Integration>>.value(<_i2.Integration>[]),
      ) as _i5.Future<List<_i2.Integration>>);

  @override
  _i5.Stream<List<_i2.Integration>> streamGroupIntegrations(String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamGroupIntegrations,
          [groupId],
        ),
        returnValue: _i5.Stream<List<_i2.Integration>>.empty(),
      ) as _i5.Stream<List<_i2.Integration>>);

  @override
  _i5.Stream<List<_i2.Integration>> streamActiveGroupIntegrations(
          String? groupId) =>
      (super.noSuchMethod(
        Invocation.method(
          #streamActiveGroupIntegrations,
          [groupId],
        ),
        returnValue: _i5.Stream<List<_i2.Integration>>.empty(),
      ) as _i5.Stream<List<_i2.Integration>>);

  @override
  _i5.Future<bool> hasActiveIntegration(
    String? groupId,
    _i6.IntegrationType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasActiveIntegration,
          [
            groupId,
            type,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, dynamic>> getIntegrationStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getIntegrationStatistics,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<void> batchUpdateIntegrations(
          List<_i2.Integration>? integrations) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchUpdateIntegrations,
          [integrations],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Integration>> getIntegrationsNeedingRefresh() =>
      (super.noSuchMethod(
        Invocation.method(
          #getIntegrationsNeedingRefresh,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.Integration>>.value(<_i2.Integration>[]),
      ) as _i5.Future<List<_i2.Integration>>);

  @override
  _i5.Future<List<_i2.Integration>> searchIntegrations(String? searchTerm) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchIntegrations,
          [searchTerm],
        ),
        returnValue:
            _i5.Future<List<_i2.Integration>>.value(<_i2.Integration>[]),
      ) as _i5.Future<List<_i2.Integration>>);

  @override
  _i5.Future<Map<String, dynamic>> getUsageMetrics(String? integrationId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsageMetrics,
          [integrationId],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}

/// A class which mocks [MicrosoftTeamsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMicrosoftTeamsService extends _i1.Mock
    implements _i7.MicrosoftTeamsService {
  MockMicrosoftTeamsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> initiateOAuth({
    required List<String>? scopes,
    String? state,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initiateOAuth,
          [],
          {
            #scopes: scopes,
            #state: state,
          },
        ),
        returnValue: _i5.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #initiateOAuth,
            [],
            {
              #scopes: scopes,
              #state: state,
            },
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<Map<String, dynamic>> exchangeCodeForToken(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #exchangeCodeForToken,
          [code],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<Map<String, dynamic>> refreshToken(String? refreshToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [refreshToken],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getTeams(String? accessToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeams,
          [accessToken],
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  _i5.Future<List<_i2.TeamsChannel>> getChannels(
    String? accessToken,
    String? teamId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [
            accessToken,
            teamId,
          ],
        ),
        returnValue:
            _i5.Future<List<_i2.TeamsChannel>>.value(<_i2.TeamsChannel>[]),
      ) as _i5.Future<List<_i2.TeamsChannel>>);

  @override
  _i5.Future<bool> sendMessage({
    required String? accessToken,
    required String? teamId,
    required String? channelId,
    required _i2.TeamsMessage? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #accessToken: accessToken,
            #teamId: teamId,
            #channelId: channelId,
            #message: message,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendEventReminder({
    required String? accessToken,
    required String? teamId,
    required String? channelId,
    required _i7.Event? event,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEventReminder,
          [],
          {
            #accessToken: accessToken,
            #teamId: teamId,
            #channelId: channelId,
            #event: event,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendResultAnnouncement({
    required String? accessToken,
    required String? teamId,
    required String? channelId,
    required _i7.Event? event,
    required List<_i7.Leaderboard>? leaderboard,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendResultAnnouncement,
          [],
          {
            #accessToken: accessToken,
            #teamId: teamId,
            #channelId: channelId,
            #event: event,
            #leaderboard: leaderboard,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendLeaderboardUpdate({
    required String? accessToken,
    required String? teamId,
    required String? channelId,
    required _i7.Event? event,
    required List<_i7.Leaderboard>? leaderboard,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendLeaderboardUpdate,
          [],
          {
            #accessToken: accessToken,
            #teamId: teamId,
            #channelId: channelId,
            #event: event,
            #leaderboard: leaderboard,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> testIntegration({
    required String? accessToken,
    required String? teamId,
    required String? channelId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #testIntegration,
          [],
          {
            #accessToken: accessToken,
            #teamId: teamId,
            #channelId: channelId,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> validateToken(String? accessToken) => (super.noSuchMethod(
        Invocation.method(
          #validateToken,
          [accessToken],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<Map<String, dynamic>?> getUserInfo(String? accessToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [accessToken],
        ),
        returnValue: _i5.Future<Map<String, dynamic>?>.value(),
      ) as _i5.Future<Map<String, dynamic>?>);

  @override
  _i5.Future<bool> createCalendarEvent({
    required String? accessToken,
    required _i2.CalendarEvent? event,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createCalendarEvent,
          [],
          {
            #accessToken: accessToken,
            #event: event,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<Map<String, dynamic>>> getCalendars(String? accessToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCalendars,
          [accessToken],
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [EmailService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailService extends _i1.Mock implements _i9.EmailService {
  MockEmailService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> sendNotification({
    required _i2.EmailIntegration? integration,
    required _i2.NotificationMessage? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNotification,
          [],
          {
            #integration: integration,
            #message: message,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendEventReminder({
    required _i2.EmailIntegration? integration,
    required dynamic event,
    List<String>? specificRecipients,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEventReminder,
          [],
          {
            #integration: integration,
            #event: event,
            #specificRecipients: specificRecipients,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendResultAnnouncement({
    required _i2.EmailIntegration? integration,
    required dynamic event,
    required List<dynamic>? leaderboard,
    List<String>? specificRecipients,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendResultAnnouncement,
          [],
          {
            #integration: integration,
            #event: event,
            #leaderboard: leaderboard,
            #specificRecipients: specificRecipients,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendLeaderboardUpdate({
    required _i2.EmailIntegration? integration,
    required dynamic event,
    required List<dynamic>? leaderboard,
    List<String>? specificRecipients,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendLeaderboardUpdate,
          [],
          {
            #integration: integration,
            #event: event,
            #leaderboard: leaderboard,
            #specificRecipients: specificRecipients,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendDeadlineAlert({
    required _i2.EmailIntegration? integration,
    required dynamic event,
    required Duration? timeRemaining,
    List<String>? specificRecipients,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendDeadlineAlert,
          [],
          {
            #integration: integration,
            #event: event,
            #timeRemaining: timeRemaining,
            #specificRecipients: specificRecipients,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> testIntegration({
    required _i2.EmailIntegration? integration,
    String? testRecipient,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #testIntegration,
          [],
          {
            #integration: integration,
            #testRecipient: testRecipient,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  bool validateConfiguration(_i2.EmailIntegration? integration) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateConfiguration,
          [integration],
        ),
        returnValue: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CalendarService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarService extends _i1.Mock implements _i10.CalendarService {
  MockCalendarService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> testConnection(_i3.IntegrationConfig? integration) =>
      (super.noSuchMethod(
        Invocation.method(
          #testConnection,
          [integration],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> createEvent(
    _i3.IntegrationConfig? integration,
    _i3.CalendarEvent? calendarEvent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createEvent,
          [
            integration,
            calendarEvent,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateEvent(
    _i3.IntegrationConfig? integration,
    _i3.CalendarEvent? calendarEvent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEvent,
          [
            integration,
            calendarEvent,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteEvent(
    _i3.IntegrationConfig? integration,
    String? eventId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteEvent,
          [
            integration,
            eventId,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.CalendarEvent>> getEvents(
    _i3.IntegrationConfig? integration, {
    DateTime? startTime,
    DateTime? endTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [integration],
          {
            #startTime: startTime,
            #endTime: endTime,
          },
        ),
        returnValue:
            _i5.Future<List<_i3.CalendarEvent>>.value(<_i3.CalendarEvent>[]),
      ) as _i5.Future<List<_i3.CalendarEvent>>);
}

/// A class which mocks [SlackService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSlackService extends _i1.Mock implements _i11.SlackService {
  MockSlackService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> initiateOAuth({
    required List<String>? scopes,
    String? state,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #initiateOAuth,
          [],
          {
            #scopes: scopes,
            #state: state,
          },
        ),
        returnValue: _i5.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #initiateOAuth,
            [],
            {
              #scopes: scopes,
              #state: state,
            },
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<bool> launchOAuth({
    required List<String>? scopes,
    String? state,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #launchOAuth,
          [],
          {
            #scopes: scopes,
            #state: state,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.SlackOAuthResponse> exchangeCodeForToken(String? code) =>
      (super.noSuchMethod(
        Invocation.method(
          #exchangeCodeForToken,
          [code],
        ),
        returnValue:
            _i5.Future<_i3.SlackOAuthResponse>.value(_FakeSlackOAuthResponse_1(
          this,
          Invocation.method(
            #exchangeCodeForToken,
            [code],
          ),
        )),
      ) as _i5.Future<_i3.SlackOAuthResponse>);

  @override
  _i5.Future<List<_i3.SlackChannel>> getChannels(String? accessToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #getChannels,
          [accessToken],
        ),
        returnValue:
            _i5.Future<List<_i3.SlackChannel>>.value(<_i3.SlackChannel>[]),
      ) as _i5.Future<List<_i3.SlackChannel>>);

  @override
  _i5.Future<bool> sendMessage({
    required String? accessToken,
    required _i3.SlackMessage? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #accessToken: accessToken,
            #message: message,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendEventReminder({
    required String? accessToken,
    required String? channelId,
    required _i3.Event? event,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendEventReminder,
          [],
          {
            #accessToken: accessToken,
            #channelId: channelId,
            #event: event,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendResultAnnouncement({
    required String? accessToken,
    required String? channelId,
    required _i3.Event? event,
    required List<_i3.Leaderboard>? leaderboard,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendResultAnnouncement,
          [],
          {
            #accessToken: accessToken,
            #channelId: channelId,
            #event: event,
            #leaderboard: leaderboard,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> sendLeaderboardUpdate({
    required String? accessToken,
    required String? channelId,
    required _i3.Event? event,
    required List<_i3.Leaderboard>? leaderboard,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendLeaderboardUpdate,
          [],
          {
            #accessToken: accessToken,
            #channelId: channelId,
            #event: event,
            #leaderboard: leaderboard,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> testIntegration({
    required String? accessToken,
    required String? channelId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #testIntegration,
          [],
          {
            #accessToken: accessToken,
            #channelId: channelId,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> validateToken(String? accessToken) => (super.noSuchMethod(
        Invocation.method(
          #validateToken,
          [accessToken],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.SlackUser?> getUserInfo(String? accessToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserInfo,
          [accessToken],
        ),
        returnValue: _i5.Future<_i3.SlackUser?>.value(),
      ) as _i5.Future<_i3.SlackUser?>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
