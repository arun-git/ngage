// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/privacy_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ngage/models/consent.dart' as _i3;
import 'package:ngage/models/enums.dart' as _i6;
import 'package:ngage/models/privacy_request.dart' as _i2;
import 'package:ngage/repositories/privacy_request_repository.dart' as _i4;
import 'package:ngage/services/consent_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePrivacyRequest_0 extends _i1.SmartFake
    implements _i2.PrivacyRequest {
  _FakePrivacyRequest_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConsent_1 extends _i1.SmartFake implements _i3.Consent {
  _FakeConsent_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PrivacyRequestRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrivacyRequestRepository extends _i1.Mock
    implements _i4.PrivacyRequestRepository {
  MockPrivacyRequestRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.PrivacyRequest> create(_i2.CreatePrivacyRequestData? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [data],
        ),
        returnValue: _i5.Future<_i2.PrivacyRequest>.value(_FakePrivacyRequest_0(
          this,
          Invocation.method(
            #create,
            [data],
          ),
        )),
      ) as _i5.Future<_i2.PrivacyRequest>);

  @override
  _i5.Future<_i2.PrivacyRequest?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i5.Future<_i2.PrivacyRequest?>.value(),
      ) as _i5.Future<_i2.PrivacyRequest?>);

  @override
  _i5.Future<List<_i2.PrivacyRequest>> getMemberRequests(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberRequests,
          [memberId],
        ),
        returnValue:
            _i5.Future<List<_i2.PrivacyRequest>>.value(<_i2.PrivacyRequest>[]),
      ) as _i5.Future<List<_i2.PrivacyRequest>>);

  @override
  _i5.Future<List<_i2.PrivacyRequest>> getRequestsByStatus(
          _i6.PrivacyRequestStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequestsByStatus,
          [status],
        ),
        returnValue:
            _i5.Future<List<_i2.PrivacyRequest>>.value(<_i2.PrivacyRequest>[]),
      ) as _i5.Future<List<_i2.PrivacyRequest>>);

  @override
  _i5.Future<List<_i2.PrivacyRequest>> getPendingRequests() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingRequests,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.PrivacyRequest>>.value(<_i2.PrivacyRequest>[]),
      ) as _i5.Future<List<_i2.PrivacyRequest>>);

  @override
  _i5.Future<List<_i2.PrivacyRequest>> getRequestsByType(
          _i6.PrivacyRequestType? requestType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequestsByType,
          [requestType],
        ),
        returnValue:
            _i5.Future<List<_i2.PrivacyRequest>>.value(<_i2.PrivacyRequest>[]),
      ) as _i5.Future<List<_i2.PrivacyRequest>>);

  @override
  _i5.Future<_i2.PrivacyRequest> update(_i2.PrivacyRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [request],
        ),
        returnValue: _i5.Future<_i2.PrivacyRequest>.value(_FakePrivacyRequest_0(
          this,
          Invocation.method(
            #update,
            [request],
          ),
        )),
      ) as _i5.Future<_i2.PrivacyRequest>);

  @override
  _i5.Future<_i2.PrivacyRequest> markInProgress(
    String? requestId,
    String? processedBy,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markInProgress,
          [
            requestId,
            processedBy,
          ],
        ),
        returnValue: _i5.Future<_i2.PrivacyRequest>.value(_FakePrivacyRequest_0(
          this,
          Invocation.method(
            #markInProgress,
            [
              requestId,
              processedBy,
            ],
          ),
        )),
      ) as _i5.Future<_i2.PrivacyRequest>);

  @override
  _i5.Future<_i2.PrivacyRequest> markCompleted(
    String? requestId,
    String? responseData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markCompleted,
          [
            requestId,
            responseData,
          ],
        ),
        returnValue: _i5.Future<_i2.PrivacyRequest>.value(_FakePrivacyRequest_0(
          this,
          Invocation.method(
            #markCompleted,
            [
              requestId,
              responseData,
            ],
          ),
        )),
      ) as _i5.Future<_i2.PrivacyRequest>);

  @override
  _i5.Future<_i2.PrivacyRequest> markRejected(
    String? requestId,
    String? rejectionReason,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markRejected,
          [
            requestId,
            rejectionReason,
          ],
        ),
        returnValue: _i5.Future<_i2.PrivacyRequest>.value(_FakePrivacyRequest_0(
          this,
          Invocation.method(
            #markRejected,
            [
              requestId,
              rejectionReason,
            ],
          ),
        )),
      ) as _i5.Future<_i2.PrivacyRequest>);

  @override
  _i5.Future<void> delete(String? requestId) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [requestId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.PrivacyRequest>> getOverdueRequests(int? daysOverdue) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOverdueRequests,
          [daysOverdue],
        ),
        returnValue:
            _i5.Future<List<_i2.PrivacyRequest>>.value(<_i2.PrivacyRequest>[]),
      ) as _i5.Future<List<_i2.PrivacyRequest>>);

  @override
  _i5.Future<List<_i2.PrivacyRequest>> getRequestsByProcessor(
          String? processedBy) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequestsByProcessor,
          [processedBy],
        ),
        returnValue:
            _i5.Future<List<_i2.PrivacyRequest>>.value(<_i2.PrivacyRequest>[]),
      ) as _i5.Future<List<_i2.PrivacyRequest>>);

  @override
  _i5.Future<Map<String, dynamic>> getRequestStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequestStatistics,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<List<_i2.PrivacyRequest>> searchRequests(String? searchTerm) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchRequests,
          [searchTerm],
        ),
        returnValue:
            _i5.Future<List<_i2.PrivacyRequest>>.value(<_i2.PrivacyRequest>[]),
      ) as _i5.Future<List<_i2.PrivacyRequest>>);
}

/// A class which mocks [ConsentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConsentService extends _i1.Mock implements _i7.ConsentService {
  MockConsentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Consent> grantConsent({
    required String? memberId,
    required _i6.ConsentType? consentType,
    String? purpose,
    String? description,
    DateTime? expiresAt,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #grantConsent,
          [],
          {
            #memberId: memberId,
            #consentType: consentType,
            #purpose: purpose,
            #description: description,
            #expiresAt: expiresAt,
            #metadata: metadata,
          },
        ),
        returnValue: _i5.Future<_i3.Consent>.value(_FakeConsent_1(
          this,
          Invocation.method(
            #grantConsent,
            [],
            {
              #memberId: memberId,
              #consentType: consentType,
              #purpose: purpose,
              #description: description,
              #expiresAt: expiresAt,
              #metadata: metadata,
            },
          ),
        )),
      ) as _i5.Future<_i3.Consent>);

  @override
  _i5.Future<List<_i3.Consent>> revokeConsent(
    String? memberId,
    _i6.ConsentType? consentType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #revokeConsent,
          [
            memberId,
            consentType,
          ],
        ),
        returnValue: _i5.Future<List<_i3.Consent>>.value(<_i3.Consent>[]),
      ) as _i5.Future<List<_i3.Consent>>);

  @override
  _i5.Future<List<_i3.Consent>> getMemberConsents(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberConsents,
          [memberId],
        ),
        returnValue: _i5.Future<List<_i3.Consent>>.value(<_i3.Consent>[]),
      ) as _i5.Future<List<_i3.Consent>>);

  @override
  _i5.Future<List<_i3.Consent>> getMemberValidConsents(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberValidConsents,
          [memberId],
        ),
        returnValue: _i5.Future<List<_i3.Consent>>.value(<_i3.Consent>[]),
      ) as _i5.Future<List<_i3.Consent>>);

  @override
  _i5.Future<bool> hasValidConsent(
    String? memberId,
    _i6.ConsentType? consentType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasValidConsent,
          [
            memberId,
            consentType,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<Map<_i6.ConsentType, bool>> getMemberConsentStatus(
          String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberConsentStatus,
          [memberId],
        ),
        returnValue: _i5.Future<Map<_i6.ConsentType, bool>>.value(
            <_i6.ConsentType, bool>{}),
      ) as _i5.Future<Map<_i6.ConsentType, bool>>);

  @override
  _i5.Future<_i3.Consent> grantMediaUsageConsent({
    required String? memberId,
    required String? purpose,
    DateTime? expiresAt,
    bool? allowCommercialUse = false,
    bool? allowModification = false,
    bool? allowRedistribution = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #grantMediaUsageConsent,
          [],
          {
            #memberId: memberId,
            #purpose: purpose,
            #expiresAt: expiresAt,
            #allowCommercialUse: allowCommercialUse,
            #allowModification: allowModification,
            #allowRedistribution: allowRedistribution,
          },
        ),
        returnValue: _i5.Future<_i3.Consent>.value(_FakeConsent_1(
          this,
          Invocation.method(
            #grantMediaUsageConsent,
            [],
            {
              #memberId: memberId,
              #purpose: purpose,
              #expiresAt: expiresAt,
              #allowCommercialUse: allowCommercialUse,
              #allowModification: allowModification,
              #allowRedistribution: allowRedistribution,
            },
          ),
        )),
      ) as _i5.Future<_i3.Consent>);

  @override
  _i5.Future<bool> hasMediaUsageConsent(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasMediaUsageConsent,
          [memberId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<_i3.Consent?> getMediaUsageConsent(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMediaUsageConsent,
          [memberId],
        ),
        returnValue: _i5.Future<_i3.Consent?>.value(),
      ) as _i5.Future<_i3.Consent?>);

  @override
  _i5.Future<_i3.Consent> grantDataProcessingConsent({
    required String? memberId,
    required String? purpose,
    DateTime? expiresAt,
    List<String>? dataCategories,
    List<String>? processingActivities,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #grantDataProcessingConsent,
          [],
          {
            #memberId: memberId,
            #purpose: purpose,
            #expiresAt: expiresAt,
            #dataCategories: dataCategories,
            #processingActivities: processingActivities,
          },
        ),
        returnValue: _i5.Future<_i3.Consent>.value(_FakeConsent_1(
          this,
          Invocation.method(
            #grantDataProcessingConsent,
            [],
            {
              #memberId: memberId,
              #purpose: purpose,
              #expiresAt: expiresAt,
              #dataCategories: dataCategories,
              #processingActivities: processingActivities,
            },
          ),
        )),
      ) as _i5.Future<_i3.Consent>);

  @override
  _i5.Future<_i3.Consent> grantMarketingConsent({
    required String? memberId,
    DateTime? expiresAt,
    List<String>? marketingChannels,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #grantMarketingConsent,
          [],
          {
            #memberId: memberId,
            #expiresAt: expiresAt,
            #marketingChannels: marketingChannels,
          },
        ),
        returnValue: _i5.Future<_i3.Consent>.value(_FakeConsent_1(
          this,
          Invocation.method(
            #grantMarketingConsent,
            [],
            {
              #memberId: memberId,
              #expiresAt: expiresAt,
              #marketingChannels: marketingChannels,
            },
          ),
        )),
      ) as _i5.Future<_i3.Consent>);

  @override
  _i5.Future<_i3.Consent> grantAnalyticsConsent({
    required String? memberId,
    DateTime? expiresAt,
    List<String>? analyticsTools,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #grantAnalyticsConsent,
          [],
          {
            #memberId: memberId,
            #expiresAt: expiresAt,
            #analyticsTools: analyticsTools,
          },
        ),
        returnValue: _i5.Future<_i3.Consent>.value(_FakeConsent_1(
          this,
          Invocation.method(
            #grantAnalyticsConsent,
            [],
            {
              #memberId: memberId,
              #expiresAt: expiresAt,
              #analyticsTools: analyticsTools,
            },
          ),
        )),
      ) as _i5.Future<_i3.Consent>);

  @override
  _i5.Future<_i3.Consent> grantThirdPartyConsent({
    required String? memberId,
    required List<String>? thirdParties,
    DateTime? expiresAt,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #grantThirdPartyConsent,
          [],
          {
            #memberId: memberId,
            #thirdParties: thirdParties,
            #expiresAt: expiresAt,
          },
        ),
        returnValue: _i5.Future<_i3.Consent>.value(_FakeConsent_1(
          this,
          Invocation.method(
            #grantThirdPartyConsent,
            [],
            {
              #memberId: memberId,
              #thirdParties: thirdParties,
              #expiresAt: expiresAt,
            },
          ),
        )),
      ) as _i5.Future<_i3.Consent>);

  @override
  _i5.Future<List<_i3.Consent>> getExpiringConsents(int? daysFromNow) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpiringConsents,
          [daysFromNow],
        ),
        returnValue: _i5.Future<List<_i3.Consent>>.value(<_i3.Consent>[]),
      ) as _i5.Future<List<_i3.Consent>>);

  @override
  _i5.Future<void> sendConsentRenewalReminders() => (super.noSuchMethod(
        Invocation.method(
          #sendConsentRenewalReminders,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> getConsentStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getConsentStatistics,
          [],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<bool> validateConsentForAction({
    required String? memberId,
    required String? action,
    Map<String, dynamic>? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateConsentForAction,
          [],
          {
            #memberId: memberId,
            #action: action,
            #context: context,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> deleteMemberConsents(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMemberConsents,
          [memberId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<Map<String, dynamic>> exportMemberConsentData(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportMemberConsentData,
          [memberId],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}
