// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/permission_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ngage/models/enums.dart' as _i5;
import 'package:ngage/models/permission.dart' as _i2;
import 'package:ngage/repositories/permission_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePermission_0 extends _i1.SmartFake implements _i2.Permission {
  _FakePermission_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRole_1 extends _i1.SmartFake implements _i2.Role {
  _FakeRole_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMemberRoleAssignment_2 extends _i1.SmartFake
    implements _i2.MemberRoleAssignment {
  _FakeMemberRoleAssignment_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PermissionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionRepository extends _i1.Mock
    implements _i3.PermissionRepository {
  MockPermissionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Permission> createPermission(_i2.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #createPermission,
          [permission],
        ),
        returnValue: _i4.Future<_i2.Permission>.value(_FakePermission_0(
          this,
          Invocation.method(
            #createPermission,
            [permission],
          ),
        )),
      ) as _i4.Future<_i2.Permission>);

  @override
  _i4.Future<_i2.Permission?> getPermissionById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPermissionById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Permission?>.value(),
      ) as _i4.Future<_i2.Permission?>);

  @override
  _i4.Future<List<_i2.Permission>> getActivePermissions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getActivePermissions,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Permission>>.value(<_i2.Permission>[]),
      ) as _i4.Future<List<_i2.Permission>>);

  @override
  _i4.Future<List<_i2.Permission>> getPermissionsByType(
          _i5.PermissionType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPermissionsByType,
          [type],
        ),
        returnValue: _i4.Future<List<_i2.Permission>>.value(<_i2.Permission>[]),
      ) as _i4.Future<List<_i2.Permission>>);

  @override
  _i4.Future<List<_i2.Permission>> getPermissionsByResource(String? resource) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPermissionsByResource,
          [resource],
        ),
        returnValue: _i4.Future<List<_i2.Permission>>.value(<_i2.Permission>[]),
      ) as _i4.Future<List<_i2.Permission>>);

  @override
  _i4.Future<_i2.Permission> updatePermission(_i2.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePermission,
          [permission],
        ),
        returnValue: _i4.Future<_i2.Permission>.value(_FakePermission_0(
          this,
          Invocation.method(
            #updatePermission,
            [permission],
          ),
        )),
      ) as _i4.Future<_i2.Permission>);

  @override
  _i4.Future<void> deletePermission(String? permissionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePermission,
          [permissionId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Role> createRole(_i2.Role? role) => (super.noSuchMethod(
        Invocation.method(
          #createRole,
          [role],
        ),
        returnValue: _i4.Future<_i2.Role>.value(_FakeRole_1(
          this,
          Invocation.method(
            #createRole,
            [role],
          ),
        )),
      ) as _i4.Future<_i2.Role>);

  @override
  _i4.Future<_i2.Role?> getRoleById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getRoleById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Role?>.value(),
      ) as _i4.Future<_i2.Role?>);

  @override
  _i4.Future<List<_i2.Role>> getActiveRoles() => (super.noSuchMethod(
        Invocation.method(
          #getActiveRoles,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Role>>.value(<_i2.Role>[]),
      ) as _i4.Future<List<_i2.Role>>);

  @override
  _i4.Future<List<_i2.Role>> getSystemRoles() => (super.noSuchMethod(
        Invocation.method(
          #getSystemRoles,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Role>>.value(<_i2.Role>[]),
      ) as _i4.Future<List<_i2.Role>>);

  @override
  _i4.Future<_i2.Role> updateRole(_i2.Role? role) => (super.noSuchMethod(
        Invocation.method(
          #updateRole,
          [role],
        ),
        returnValue: _i4.Future<_i2.Role>.value(_FakeRole_1(
          this,
          Invocation.method(
            #updateRole,
            [role],
          ),
        )),
      ) as _i4.Future<_i2.Role>);

  @override
  _i4.Future<void> deleteRole(String? roleId) => (super.noSuchMethod(
        Invocation.method(
          #deleteRole,
          [roleId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.MemberRoleAssignment> createRoleAssignment(
          _i2.MemberRoleAssignment? assignment) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRoleAssignment,
          [assignment],
        ),
        returnValue: _i4.Future<_i2.MemberRoleAssignment>.value(
            _FakeMemberRoleAssignment_2(
          this,
          Invocation.method(
            #createRoleAssignment,
            [assignment],
          ),
        )),
      ) as _i4.Future<_i2.MemberRoleAssignment>);

  @override
  _i4.Future<_i2.MemberRoleAssignment?> getRoleAssignmentById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoleAssignmentById,
          [id],
        ),
        returnValue: _i4.Future<_i2.MemberRoleAssignment?>.value(),
      ) as _i4.Future<_i2.MemberRoleAssignment?>);

  @override
  _i4.Future<List<_i2.MemberRoleAssignment>> getMemberRoleAssignments(
          String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberRoleAssignments,
          [memberId],
        ),
        returnValue: _i4.Future<List<_i2.MemberRoleAssignment>>.value(
            <_i2.MemberRoleAssignment>[]),
      ) as _i4.Future<List<_i2.MemberRoleAssignment>>);

  @override
  _i4.Future<List<_i2.MemberRoleAssignment>> getContextRoleAssignments(
    String? contextType,
    String? contextId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContextRoleAssignments,
          [
            contextType,
            contextId,
          ],
        ),
        returnValue: _i4.Future<List<_i2.MemberRoleAssignment>>.value(
            <_i2.MemberRoleAssignment>[]),
      ) as _i4.Future<List<_i2.MemberRoleAssignment>>);

  @override
  _i4.Future<_i2.MemberRoleAssignment?> getMemberContextRoleAssignment(
    String? memberId,
    String? contextType,
    String? contextId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberContextRoleAssignment,
          [
            memberId,
            contextType,
            contextId,
          ],
        ),
        returnValue: _i4.Future<_i2.MemberRoleAssignment?>.value(),
      ) as _i4.Future<_i2.MemberRoleAssignment?>);

  @override
  _i4.Future<_i2.MemberRoleAssignment> updateRoleAssignment(
          _i2.MemberRoleAssignment? assignment) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRoleAssignment,
          [assignment],
        ),
        returnValue: _i4.Future<_i2.MemberRoleAssignment>.value(
            _FakeMemberRoleAssignment_2(
          this,
          Invocation.method(
            #updateRoleAssignment,
            [assignment],
          ),
        )),
      ) as _i4.Future<_i2.MemberRoleAssignment>);

  @override
  _i4.Future<_i2.MemberRoleAssignment> deactivateRoleAssignment(
          String? assignmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deactivateRoleAssignment,
          [assignmentId],
        ),
        returnValue: _i4.Future<_i2.MemberRoleAssignment>.value(
            _FakeMemberRoleAssignment_2(
          this,
          Invocation.method(
            #deactivateRoleAssignment,
            [assignmentId],
          ),
        )),
      ) as _i4.Future<_i2.MemberRoleAssignment>);

  @override
  _i4.Future<void> deleteRoleAssignment(String? assignmentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRoleAssignment,
          [assignmentId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Permission>> getMemberPermissions(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberPermissions,
          [memberId],
        ),
        returnValue: _i4.Future<List<_i2.Permission>>.value(<_i2.Permission>[]),
      ) as _i4.Future<List<_i2.Permission>>);

  @override
  _i4.Future<bool> memberHasPermission(
    String? memberId,
    String? permissionName,
    String? contextType,
    String? contextId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #memberHasPermission,
          [
            memberId,
            permissionName,
            contextType,
            contextId,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>> getRoleAssignmentStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoleAssignmentStatistics,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}
