// Mocks generated by Mockito 5.4.4 from annotations
// in ngage/test/services/consent_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ngage/models/consent.dart' as _i2;
import 'package:ngage/models/enums.dart' as _i5;
import 'package:ngage/repositories/consent_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConsent_0 extends _i1.SmartFake implements _i2.Consent {
  _FakeConsent_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConsentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockConsentRepository extends _i1.Mock implements _i3.ConsentRepository {
  MockConsentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Consent> create(_i2.CreateConsentData? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [data],
        ),
        returnValue: _i4.Future<_i2.Consent>.value(_FakeConsent_0(
          this,
          Invocation.method(
            #create,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.Consent>);

  @override
  _i4.Future<_i2.Consent?> getById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Consent?>.value(),
      ) as _i4.Future<_i2.Consent?>);

  @override
  _i4.Future<List<_i2.Consent>> getMemberConsents(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberConsents,
          [memberId],
        ),
        returnValue: _i4.Future<List<_i2.Consent>>.value(<_i2.Consent>[]),
      ) as _i4.Future<List<_i2.Consent>>);

  @override
  _i4.Future<_i2.Consent?> getMemberConsentByType(
    String? memberId,
    _i5.ConsentType? consentType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberConsentByType,
          [
            memberId,
            consentType,
          ],
        ),
        returnValue: _i4.Future<_i2.Consent?>.value(),
      ) as _i4.Future<_i2.Consent?>);

  @override
  _i4.Future<List<_i2.Consent>> getMemberValidConsents(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMemberValidConsents,
          [memberId],
        ),
        returnValue: _i4.Future<List<_i2.Consent>>.value(<_i2.Consent>[]),
      ) as _i4.Future<List<_i2.Consent>>);

  @override
  _i4.Future<_i2.Consent> update(_i2.Consent? consent) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [consent],
        ),
        returnValue: _i4.Future<_i2.Consent>.value(_FakeConsent_0(
          this,
          Invocation.method(
            #update,
            [consent],
          ),
        )),
      ) as _i4.Future<_i2.Consent>);

  @override
  _i4.Future<_i2.Consent> revoke(String? consentId) => (super.noSuchMethod(
        Invocation.method(
          #revoke,
          [consentId],
        ),
        returnValue: _i4.Future<_i2.Consent>.value(_FakeConsent_0(
          this,
          Invocation.method(
            #revoke,
            [consentId],
          ),
        )),
      ) as _i4.Future<_i2.Consent>);

  @override
  _i4.Future<List<_i2.Consent>> revokeMemberConsentsByType(
    String? memberId,
    _i5.ConsentType? consentType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #revokeMemberConsentsByType,
          [
            memberId,
            consentType,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Consent>>.value(<_i2.Consent>[]),
      ) as _i4.Future<List<_i2.Consent>>);

  @override
  _i4.Future<void> delete(String? consentId) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [consentId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMemberConsents(String? memberId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteMemberConsents,
          [memberId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> hasValidConsent(
    String? memberId,
    _i5.ConsentType? consentType,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #hasValidConsent,
          [
            memberId,
            consentType,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.Consent>> getExpiringConsents(int? daysFromNow) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpiringConsents,
          [daysFromNow],
        ),
        returnValue: _i4.Future<List<_i2.Consent>>.value(<_i2.Consent>[]),
      ) as _i4.Future<List<_i2.Consent>>);

  @override
  _i4.Future<Map<String, dynamic>> getConsentStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getConsentStatistics,
          [],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}
